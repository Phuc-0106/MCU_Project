
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004044  08004044  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004044  08004044  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004044  08004044  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800404c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000ac  080040f8  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080040f8  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa5b  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002365  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00031e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018831  00000000  00000000  00033860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001049d  00000000  00000000  0004c091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b354  00000000  00000000  0005c52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae0  00000000  00000000  000e78d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f10 	.word	0x08003f10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08003f10 	.word	0x08003f10

0800014c <isButton1Press>:

int TimerKeyPress = 2000;
int TimerKeyPress_2 = 2000;
int TimerKeyPress_3 = 2000;

int isButton1Press(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Press+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Press+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Press+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Press+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000c8 	.word	0x200000c8

08000170 <isButton2Press>:
int isButton2Press(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Press+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Press+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Press+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Press+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000cc 	.word	0x200000cc

08000194 <isButton3Press>:
int isButton3Press(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Press+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Press+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Press+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Press+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000d0 	.word	0x200000d0

080001b8 <subKeyProcess>:

void subKeyProcess(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	200000c8 	.word	0x200000c8

080001d0 <subKeyProcess_2>:
void subKeyProcess_2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess_2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	200000cc 	.word	0x200000cc

080001e8 <subKeyProcess_3>:
void subKeyProcess_3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	200000d0 	.word	0x200000d0

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getKeyInput+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getKeyInput+0x88>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <getKeyInput+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <getKeyInput+0x84>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 8000214:	2108      	movs	r1, #8
 8000216:	481e      	ldr	r0, [pc, #120]	; (8000290 <getKeyInput+0x90>)
 8000218:	f001 fd3e 	bl	8001c98 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <getKeyInput+0x8c>)
 8000222:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <getKeyInput+0x88>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b16      	ldr	r3, [pc, #88]	; (8000284 <getKeyInput+0x84>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d126      	bne.n	800027e <getKeyInput+0x7e>
 8000230:	4b14      	ldr	r3, [pc, #80]	; (8000284 <getKeyInput+0x84>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <getKeyInput+0x8c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d120      	bne.n	800027e <getKeyInput+0x7e>
		if(KeyReg3 != KeyReg2){
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput+0x94>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <getKeyInput+0x8c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d00e      	beq.n	8000266 <getKeyInput+0x66>
			KeyReg3 = KeyReg2;
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <getKeyInput+0x8c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a11      	ldr	r2, [pc, #68]	; (8000294 <getKeyInput+0x94>)
 800024e:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <getKeyInput+0x8c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d112      	bne.n	800027e <getKeyInput+0x7e>
				//TODO
				subKeyProcess();
 8000258:	f7ff ffae 	bl	80001b8 <subKeyProcess>
				TimerKeyPress = 500;
 800025c:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <getKeyInput+0x98>)
 800025e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000262:	601a      	str	r2, [r3, #0]
			if(TimerKeyPress == 0){
				KeyReg3 = NORMAL_STATE;
			}
		}
	}
}
 8000264:	e00b      	b.n	800027e <getKeyInput+0x7e>
			TimerKeyPress--;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <getKeyInput+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <getKeyInput+0x98>)
 800026e:	6013      	str	r3, [r2, #0]
			if(TimerKeyPress == 0){
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <getKeyInput+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeyInput+0x7e>
				KeyReg3 = NORMAL_STATE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeyInput+0x94>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000
 800028c:	20000008 	.word	0x20000008
 8000290:	40010c00 	.word	0x40010c00
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000030 	.word	0x20000030

0800029c <getKeyInput_2>:

void getKeyInput_2(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getKeyInput_2+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKeyInput_2+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <getKeyInput_2+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <getKeyInput_2+0x84>)
 80002ae:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 80002b0:	2120      	movs	r1, #32
 80002b2:	481e      	ldr	r0, [pc, #120]	; (800032c <getKeyInput_2+0x90>)
 80002b4:	f001 fcf0 	bl	8001c98 <HAL_GPIO_ReadPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <getKeyInput_2+0x8c>)
 80002be:	601a      	str	r2, [r3, #0]
	if((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)){
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <getKeyInput_2+0x88>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <getKeyInput_2+0x84>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d126      	bne.n	800031a <getKeyInput_2+0x7e>
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyInput_2+0x84>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyInput_2+0x8c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d120      	bne.n	800031a <getKeyInput_2+0x7e>
		if(KeyReg7 != KeyReg6){
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <getKeyInput_2+0x94>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <getKeyInput_2+0x8c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d00e      	beq.n	8000302 <getKeyInput_2+0x66>
			KeyReg7 = KeyReg6;
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput_2+0x8c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <getKeyInput_2+0x94>)
 80002ea:	6013      	str	r3, [r2, #0]
			if(KeyReg6 == PRESSED_STATE){
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <getKeyInput_2+0x8c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d112      	bne.n	800031a <getKeyInput_2+0x7e>
				//TODO
				subKeyProcess_2();
 80002f4:	f7ff ff6c 	bl	80001d0 <subKeyProcess_2>
				TimerKeyPress_2 = 500;
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKeyInput_2+0x98>)
 80002fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002fe:	601a      	str	r2, [r3, #0]
			if(TimerKeyPress_2 == 0){
				KeyReg7 = NORMAL_STATE;
			}
		}
	}
}
 8000300:	e00b      	b.n	800031a <getKeyInput_2+0x7e>
			TimerKeyPress_2--;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyInput_2+0x98>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <getKeyInput_2+0x98>)
 800030a:	6013      	str	r3, [r2, #0]
			if(TimerKeyPress_2 == 0){
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKeyInput_2+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyInput_2+0x7e>
				KeyReg7 = NORMAL_STATE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <getKeyInput_2+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000014 	.word	0x20000014
 8000324:	20000010 	.word	0x20000010
 8000328:	20000018 	.word	0x20000018
 800032c:	40010c00 	.word	0x40010c00
 8000330:	2000001c 	.word	0x2000001c
 8000334:	20000034 	.word	0x20000034

08000338 <getKeyInput_3>:
void getKeyInput_3(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	KeyReg8 = KeyReg9;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <getKeyInput_3+0x84>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <getKeyInput_3+0x88>)
 8000342:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKeyInput_3+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <getKeyInput_3+0x84>)
 800034a:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 800034c:	2110      	movs	r1, #16
 800034e:	481e      	ldr	r0, [pc, #120]	; (80003c8 <getKeyInput_3+0x90>)
 8000350:	f001 fca2 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <getKeyInput_3+0x8c>)
 800035a:	601a      	str	r2, [r3, #0]
	if((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)){
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <getKeyInput_3+0x88>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <getKeyInput_3+0x84>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	429a      	cmp	r2, r3
 8000366:	d126      	bne.n	80003b6 <getKeyInput_3+0x7e>
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <getKeyInput_3+0x84>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <getKeyInput_3+0x8c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	429a      	cmp	r2, r3
 8000372:	d120      	bne.n	80003b6 <getKeyInput_3+0x7e>
		if(KeyReg11 != KeyReg10){
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <getKeyInput_3+0x94>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <getKeyInput_3+0x8c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d00e      	beq.n	800039e <getKeyInput_3+0x66>
			KeyReg11 = KeyReg10;
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKeyInput_3+0x8c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <getKeyInput_3+0x94>)
 8000386:	6013      	str	r3, [r2, #0]
			if(KeyReg10 == PRESSED_STATE){
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKeyInput_3+0x8c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d112      	bne.n	80003b6 <getKeyInput_3+0x7e>
				//TODO
				subKeyProcess_3();
 8000390:	f7ff ff2a 	bl	80001e8 <subKeyProcess_3>
				TimerKeyPress_3 = 500;
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <getKeyInput_3+0x98>)
 8000396:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800039a:	601a      	str	r2, [r3, #0]
			if(TimerKeyPress_3 == 0){
				KeyReg11 = NORMAL_STATE;
			}
		}
	}
}
 800039c:	e00b      	b.n	80003b6 <getKeyInput_3+0x7e>
			TimerKeyPress_3--;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <getKeyInput_3+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <getKeyInput_3+0x98>)
 80003a6:	6013      	str	r3, [r2, #0]
			if(TimerKeyPress_3 == 0){
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <getKeyInput_3+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <getKeyInput_3+0x7e>
				KeyReg11 = NORMAL_STATE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <getKeyInput_3+0x94>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000024 	.word	0x20000024
 80003c0:	20000020 	.word	0x20000020
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	20000038 	.word	0x20000038

080003d4 <fsm_auto_mode1_run>:
int yellow_main, yellow_cross=0;
int green_main, green_cross=0;
int ind=0;
int num_buf=0;

void fsm_auto_mode1_run(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b0a0      	sub	sp, #128	; 0x80
 80003d8:	af00      	add	r7, sp, #0
	switch(status){
 80003da:	4ba7      	ldr	r3, [pc, #668]	; (8000678 <fsm_auto_mode1_run+0x2a4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3b01      	subs	r3, #1
 80003e0:	2b04      	cmp	r3, #4
 80003e2:	f200 8281 	bhi.w	80008e8 <fsm_auto_mode1_run+0x514>
 80003e6:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <fsm_auto_mode1_run+0x18>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000401 	.word	0x08000401
 80003f0:	080004cd 	.word	0x080004cd
 80003f4:	080005a3 	.word	0x080005a3
 80003f8:	080006cd 	.word	0x080006cd
 80003fc:	080007a3 	.word	0x080007a3
	case INIT:

		HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	489d      	ldr	r0, [pc, #628]	; (800067c <fsm_auto_mode1_run+0x2a8>)
 8000406:	f001 fc5e 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2140      	movs	r1, #64	; 0x40
 800040e:	489c      	ldr	r0, [pc, #624]	; (8000680 <fsm_auto_mode1_run+0x2ac>)
 8000410:	f001 fc59 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	489a      	ldr	r0, [pc, #616]	; (8000684 <fsm_auto_mode1_run+0x2b0>)
 800041c:	f001 fc53 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000426:	4897      	ldr	r0, [pc, #604]	; (8000684 <fsm_auto_mode1_run+0x2b0>)
 8000428:	f001 fc4d 	bl	8001cc6 <HAL_GPIO_WritePin>

		red_main = red_dur/1000;
 800042c:	4b96      	ldr	r3, [pc, #600]	; (8000688 <fsm_auto_mode1_run+0x2b4>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a96      	ldr	r2, [pc, #600]	; (800068c <fsm_auto_mode1_run+0x2b8>)
 8000432:	fb82 1203 	smull	r1, r2, r2, r3
 8000436:	1192      	asrs	r2, r2, #6
 8000438:	17db      	asrs	r3, r3, #31
 800043a:	1ad3      	subs	r3, r2, r3
 800043c:	4a94      	ldr	r2, [pc, #592]	; (8000690 <fsm_auto_mode1_run+0x2bc>)
 800043e:	6013      	str	r3, [r2, #0]
		red_cross = red_dur/1000;
 8000440:	4b91      	ldr	r3, [pc, #580]	; (8000688 <fsm_auto_mode1_run+0x2b4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a91      	ldr	r2, [pc, #580]	; (800068c <fsm_auto_mode1_run+0x2b8>)
 8000446:	fb82 1203 	smull	r1, r2, r2, r3
 800044a:	1192      	asrs	r2, r2, #6
 800044c:	17db      	asrs	r3, r3, #31
 800044e:	1ad3      	subs	r3, r2, r3
 8000450:	4a90      	ldr	r2, [pc, #576]	; (8000694 <fsm_auto_mode1_run+0x2c0>)
 8000452:	6013      	str	r3, [r2, #0]
		yellow_main = yellow_dur/1000;
 8000454:	4b90      	ldr	r3, [pc, #576]	; (8000698 <fsm_auto_mode1_run+0x2c4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a8c      	ldr	r2, [pc, #560]	; (800068c <fsm_auto_mode1_run+0x2b8>)
 800045a:	fb82 1203 	smull	r1, r2, r2, r3
 800045e:	1192      	asrs	r2, r2, #6
 8000460:	17db      	asrs	r3, r3, #31
 8000462:	1ad3      	subs	r3, r2, r3
 8000464:	4a8d      	ldr	r2, [pc, #564]	; (800069c <fsm_auto_mode1_run+0x2c8>)
 8000466:	6013      	str	r3, [r2, #0]
		yellow_cross = yellow_dur/1000;
 8000468:	4b8b      	ldr	r3, [pc, #556]	; (8000698 <fsm_auto_mode1_run+0x2c4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a87      	ldr	r2, [pc, #540]	; (800068c <fsm_auto_mode1_run+0x2b8>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	1192      	asrs	r2, r2, #6
 8000474:	17db      	asrs	r3, r3, #31
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	4a89      	ldr	r2, [pc, #548]	; (80006a0 <fsm_auto_mode1_run+0x2cc>)
 800047a:	6013      	str	r3, [r2, #0]
		green_main = green_dur/1000;
 800047c:	4b89      	ldr	r3, [pc, #548]	; (80006a4 <fsm_auto_mode1_run+0x2d0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a82      	ldr	r2, [pc, #520]	; (800068c <fsm_auto_mode1_run+0x2b8>)
 8000482:	fb82 1203 	smull	r1, r2, r2, r3
 8000486:	1192      	asrs	r2, r2, #6
 8000488:	17db      	asrs	r3, r3, #31
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	4a86      	ldr	r2, [pc, #536]	; (80006a8 <fsm_auto_mode1_run+0x2d4>)
 800048e:	6013      	str	r3, [r2, #0]
		green_cross = green_dur/1000;
 8000490:	4b84      	ldr	r3, [pc, #528]	; (80006a4 <fsm_auto_mode1_run+0x2d0>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a7d      	ldr	r2, [pc, #500]	; (800068c <fsm_auto_mode1_run+0x2b8>)
 8000496:	fb82 1203 	smull	r1, r2, r2, r3
 800049a:	1192      	asrs	r2, r2, #6
 800049c:	17db      	asrs	r3, r3, #31
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	4a82      	ldr	r2, [pc, #520]	; (80006ac <fsm_auto_mode1_run+0x2d8>)
 80004a2:	6013      	str	r3, [r2, #0]

		status = RED_GREEN;
 80004a4:	4b74      	ldr	r3, [pc, #464]	; (8000678 <fsm_auto_mode1_run+0x2a4>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	601a      	str	r2, [r3, #0]
		ind=0;
 80004aa:	4b81      	ldr	r3, [pc, #516]	; (80006b0 <fsm_auto_mode1_run+0x2dc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
		setTimer1(green_dur);
 80004b0:	4b7c      	ldr	r3, [pc, #496]	; (80006a4 <fsm_auto_mode1_run+0x2d0>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fe93 	bl	80011e0 <setTimer1>
		setTimer3(1000);
 80004ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004be:	f000 feb7 	bl	8001230 <setTimer3>
		setTimer4(1000);
 80004c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c6:	f000 fec7 	bl	8001258 <setTimer4>

		break;
 80004ca:	e214      	b.n	80008f6 <fsm_auto_mode1_run+0x522>

	case RED_GREEN:
		HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	486c      	ldr	r0, [pc, #432]	; (8000684 <fsm_auto_mode1_run+0x2b0>)
 80004d4:	f001 fbf7 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	4869      	ldr	r0, [pc, #420]	; (8000684 <fsm_auto_mode1_run+0x2b0>)
 80004e0:	f001 fbf1 	bl	8001cc6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	4864      	ldr	r0, [pc, #400]	; (800067c <fsm_auto_mode1_run+0x2a8>)
 80004ea:	f001 fbec 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2140      	movs	r1, #64	; 0x40
 80004f2:	4863      	ldr	r0, [pc, #396]	; (8000680 <fsm_auto_mode1_run+0x2ac>)
 80004f4:	f001 fbe7 	bl	8001cc6 <HAL_GPIO_WritePin>

		if(timer1_flag ==1){
 80004f8:	4b6e      	ldr	r3, [pc, #440]	; (80006b4 <fsm_auto_mode1_run+0x2e0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d10a      	bne.n	8000516 <fsm_auto_mode1_run+0x142>
			status = RED_YELLOW;
 8000500:	4b5d      	ldr	r3, [pc, #372]	; (8000678 <fsm_auto_mode1_run+0x2a4>)
 8000502:	2203      	movs	r2, #3
 8000504:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_dur);
 8000506:	4b64      	ldr	r3, [pc, #400]	; (8000698 <fsm_auto_mode1_run+0x2c4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fe68 	bl	80011e0 <setTimer1>
			ind = 0;
 8000510:	4b67      	ldr	r3, [pc, #412]	; (80006b0 <fsm_auto_mode1_run+0x2dc>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
		}
		if(timer3_flag==1){
 8000516:	4b68      	ldr	r3, [pc, #416]	; (80006b8 <fsm_auto_mode1_run+0x2e4>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d125      	bne.n	800056a <fsm_auto_mode1_run+0x196>
			char buffer_1[16];
			char buffer_2[16];

			lcd_goto_XY(1, 0);
 800051e:	2100      	movs	r1, #0
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fcb7 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_1, "RED1:       %02d", red_main);
 8000526:	4b5a      	ldr	r3, [pc, #360]	; (8000690 <fsm_auto_mode1_run+0x2bc>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800052e:	4963      	ldr	r1, [pc, #396]	; (80006bc <fsm_auto_mode1_run+0x2e8>)
 8000530:	4618      	mov	r0, r3
 8000532:	f003 f8b3 	bl	800369c <siprintf>
			lcd_send_string(buffer_1);
 8000536:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fc8e 	bl	8000e5c <lcd_send_string>

			 lcd_goto_XY(2, 0);
 8000540:	2100      	movs	r1, #0
 8000542:	2002      	movs	r0, #2
 8000544:	f000 fca6 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_2, "GREEN2:     %02d", green_cross);
 8000548:	4b58      	ldr	r3, [pc, #352]	; (80006ac <fsm_auto_mode1_run+0x2d8>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000550:	495b      	ldr	r1, [pc, #364]	; (80006c0 <fsm_auto_mode1_run+0x2ec>)
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f8a2 	bl	800369c <siprintf>
			lcd_send_string(buffer_2);
 8000558:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fc7d 	bl	8000e5c <lcd_send_string>
			setTimer3(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fe63 	bl	8001230 <setTimer3>
		}
		if(timer4_flag==1){
 800056a:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <fsm_auto_mode1_run+0x2f0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10d      	bne.n	800058e <fsm_auto_mode1_run+0x1ba>
			red_main--;
 8000572:	4b47      	ldr	r3, [pc, #284]	; (8000690 <fsm_auto_mode1_run+0x2bc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a45      	ldr	r2, [pc, #276]	; (8000690 <fsm_auto_mode1_run+0x2bc>)
 800057a:	6013      	str	r3, [r2, #0]
			green_cross--;
 800057c:	4b4b      	ldr	r3, [pc, #300]	; (80006ac <fsm_auto_mode1_run+0x2d8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3b01      	subs	r3, #1
 8000582:	4a4a      	ldr	r2, [pc, #296]	; (80006ac <fsm_auto_mode1_run+0x2d8>)
 8000584:	6013      	str	r3, [r2, #0]
			setTimer4(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058a:	f000 fe65 	bl	8001258 <setTimer4>
		}
		if(isButton1Press() == 1) status = MODE2_BUFF;
 800058e:	f7ff fddd 	bl	800014c <isButton1Press>
 8000592:	4603      	mov	r3, r0
 8000594:	2b01      	cmp	r3, #1
 8000596:	f040 81a9 	bne.w	80008ec <fsm_auto_mode1_run+0x518>
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <fsm_auto_mode1_run+0x2a4>)
 800059c:	220a      	movs	r2, #10
 800059e:	601a      	str	r2, [r3, #0]
		break;
 80005a0:	e1a4      	b.n	80008ec <fsm_auto_mode1_run+0x518>
	case RED_YELLOW:
		HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	4836      	ldr	r0, [pc, #216]	; (8000684 <fsm_auto_mode1_run+0x2b0>)
 80005aa:	f001 fb8c 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b4:	4833      	ldr	r0, [pc, #204]	; (8000684 <fsm_auto_mode1_run+0x2b0>)
 80005b6:	f001 fb86 	bl	8001cc6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	482f      	ldr	r0, [pc, #188]	; (800067c <fsm_auto_mode1_run+0x2a8>)
 80005c0:	f001 fb81 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2140      	movs	r1, #64	; 0x40
 80005c8:	482d      	ldr	r0, [pc, #180]	; (8000680 <fsm_auto_mode1_run+0x2ac>)
 80005ca:	f001 fb7c 	bl	8001cc6 <HAL_GPIO_WritePin>

		if(timer1_flag ==1){
 80005ce:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <fsm_auto_mode1_run+0x2e0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d10a      	bne.n	80005ec <fsm_auto_mode1_run+0x218>
			status = GREEN_RED;
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <fsm_auto_mode1_run+0x2a4>)
 80005d8:	2204      	movs	r2, #4
 80005da:	601a      	str	r2, [r3, #0]
			ind = 0;
 80005dc:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <fsm_auto_mode1_run+0x2dc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
			setTimer1(green_dur);
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <fsm_auto_mode1_run+0x2d0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fdfa 	bl	80011e0 <setTimer1>
		}
		if(timer3_flag==1){
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <fsm_auto_mode1_run+0x2e4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d125      	bne.n	8000640 <fsm_auto_mode1_run+0x26c>
			char buffer_1[16];
			char buffer_2[16];

			lcd_goto_XY(1, 0);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fc4c 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_1, "RED1:       %02d", red_main);
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <fsm_auto_mode1_run+0x2bc>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000604:	492d      	ldr	r1, [pc, #180]	; (80006bc <fsm_auto_mode1_run+0x2e8>)
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f848 	bl	800369c <siprintf>
			lcd_send_string(buffer_1);
 800060c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fc23 	bl	8000e5c <lcd_send_string>

			 lcd_goto_XY(2, 0);
 8000616:	2100      	movs	r1, #0
 8000618:	2002      	movs	r0, #2
 800061a:	f000 fc3b 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_2, "YELLOW2:    %02d", yellow_cross);
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <fsm_auto_mode1_run+0x2cc>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000626:	4928      	ldr	r1, [pc, #160]	; (80006c8 <fsm_auto_mode1_run+0x2f4>)
 8000628:	4618      	mov	r0, r3
 800062a:	f003 f837 	bl	800369c <siprintf>
			lcd_send_string(buffer_2);
 800062e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fc12 	bl	8000e5c <lcd_send_string>
			setTimer3(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f000 fdf8 	bl	8001230 <setTimer3>
		}
		if(timer4_flag==1){
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <fsm_auto_mode1_run+0x2f0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d10d      	bne.n	8000664 <fsm_auto_mode1_run+0x290>
			red_main--;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <fsm_auto_mode1_run+0x2bc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <fsm_auto_mode1_run+0x2bc>)
 8000650:	6013      	str	r3, [r2, #0]
			yellow_cross--;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <fsm_auto_mode1_run+0x2cc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3b01      	subs	r3, #1
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <fsm_auto_mode1_run+0x2cc>)
 800065a:	6013      	str	r3, [r2, #0]
			setTimer4(1000);
 800065c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000660:	f000 fdfa 	bl	8001258 <setTimer4>
		}
		if(isButton1Press() == 1) status = MODE2_BUFF;
 8000664:	f7ff fd72 	bl	800014c <isButton1Press>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	f040 8140 	bne.w	80008f0 <fsm_auto_mode1_run+0x51c>
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <fsm_auto_mode1_run+0x2a4>)
 8000672:	220a      	movs	r2, #10
 8000674:	601a      	str	r2, [r3, #0]
		break;
 8000676:	e13b      	b.n	80008f0 <fsm_auto_mode1_run+0x51c>
 8000678:	200000f0 	.word	0x200000f0
 800067c:	40011000 	.word	0x40011000
 8000680:	40010c00 	.word	0x40010c00
 8000684:	40010800 	.word	0x40010800
 8000688:	200000fc 	.word	0x200000fc
 800068c:	10624dd3 	.word	0x10624dd3
 8000690:	20000154 	.word	0x20000154
 8000694:	200000d4 	.word	0x200000d4
 8000698:	200000f8 	.word	0x200000f8
 800069c:	2000014c 	.word	0x2000014c
 80006a0:	200000d8 	.word	0x200000d8
 80006a4:	200000f4 	.word	0x200000f4
 80006a8:	20000150 	.word	0x20000150
 80006ac:	200000dc 	.word	0x200000dc
 80006b0:	200000e0 	.word	0x200000e0
 80006b4:	20000104 	.word	0x20000104
 80006b8:	20000114 	.word	0x20000114
 80006bc:	08003f28 	.word	0x08003f28
 80006c0:	08003f3c 	.word	0x08003f3c
 80006c4:	2000011c 	.word	0x2000011c
 80006c8:	08003f50 	.word	0x08003f50

	case GREEN_RED:
		HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d2:	488b      	ldr	r0, [pc, #556]	; (8000900 <fsm_auto_mode1_run+0x52c>)
 80006d4:	f001 faf7 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006de:	4888      	ldr	r0, [pc, #544]	; (8000900 <fsm_auto_mode1_run+0x52c>)
 80006e0:	f001 faf1 	bl	8001cc6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	4886      	ldr	r0, [pc, #536]	; (8000904 <fsm_auto_mode1_run+0x530>)
 80006ea:	f001 faec 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4885      	ldr	r0, [pc, #532]	; (8000908 <fsm_auto_mode1_run+0x534>)
 80006f4:	f001 fae7 	bl	8001cc6 <HAL_GPIO_WritePin>

		if(timer1_flag ==1){
 80006f8:	4b84      	ldr	r3, [pc, #528]	; (800090c <fsm_auto_mode1_run+0x538>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d10a      	bne.n	8000716 <fsm_auto_mode1_run+0x342>
			status = YELLOW_RED;
 8000700:	4b83      	ldr	r3, [pc, #524]	; (8000910 <fsm_auto_mode1_run+0x53c>)
 8000702:	2205      	movs	r2, #5
 8000704:	601a      	str	r2, [r3, #0]
			ind = 0;
 8000706:	4b83      	ldr	r3, [pc, #524]	; (8000914 <fsm_auto_mode1_run+0x540>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_dur);
 800070c:	4b82      	ldr	r3, [pc, #520]	; (8000918 <fsm_auto_mode1_run+0x544>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fd65 	bl	80011e0 <setTimer1>
			/*setTimer3(25);
			setTimer4(100);*/
		}
		if(timer3_flag==1){
 8000716:	4b81      	ldr	r3, [pc, #516]	; (800091c <fsm_auto_mode1_run+0x548>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d125      	bne.n	800076a <fsm_auto_mode1_run+0x396>
			char buffer_1[16];
			char buffer_2[16];

			lcd_goto_XY(1, 0);
 800071e:	2100      	movs	r1, #0
 8000720:	2001      	movs	r0, #1
 8000722:	f000 fbb7 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_1, "GREEN1:     %02d", green_main);
 8000726:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <fsm_auto_mode1_run+0x54c>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800072e:	497d      	ldr	r1, [pc, #500]	; (8000924 <fsm_auto_mode1_run+0x550>)
 8000730:	4618      	mov	r0, r3
 8000732:	f002 ffb3 	bl	800369c <siprintf>
			lcd_send_string(buffer_1);
 8000736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fb8e 	bl	8000e5c <lcd_send_string>
			 lcd_goto_XY(2, 0);
 8000740:	2100      	movs	r1, #0
 8000742:	2002      	movs	r0, #2
 8000744:	f000 fba6 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_2, "RED2:       %02d", red_cross);
 8000748:	4b77      	ldr	r3, [pc, #476]	; (8000928 <fsm_auto_mode1_run+0x554>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4976      	ldr	r1, [pc, #472]	; (800092c <fsm_auto_mode1_run+0x558>)
 8000752:	4618      	mov	r0, r3
 8000754:	f002 ffa2 	bl	800369c <siprintf>
			lcd_send_string(buffer_2);
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fb7d 	bl	8000e5c <lcd_send_string>
			setTimer3(1000);
 8000762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000766:	f000 fd63 	bl	8001230 <setTimer3>
		}
		if(timer4_flag==1){
 800076a:	4b71      	ldr	r3, [pc, #452]	; (8000930 <fsm_auto_mode1_run+0x55c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d10d      	bne.n	800078e <fsm_auto_mode1_run+0x3ba>
			green_main--;
 8000772:	4b6b      	ldr	r3, [pc, #428]	; (8000920 <fsm_auto_mode1_run+0x54c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a69      	ldr	r2, [pc, #420]	; (8000920 <fsm_auto_mode1_run+0x54c>)
 800077a:	6013      	str	r3, [r2, #0]
			red_cross--;
 800077c:	4b6a      	ldr	r3, [pc, #424]	; (8000928 <fsm_auto_mode1_run+0x554>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	4a69      	ldr	r2, [pc, #420]	; (8000928 <fsm_auto_mode1_run+0x554>)
 8000784:	6013      	str	r3, [r2, #0]
			setTimer4(1000);
 8000786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078a:	f000 fd65 	bl	8001258 <setTimer4>
		}
		if(isButton1Press() == 1) status = MODE2_BUFF;
 800078e:	f7ff fcdd 	bl	800014c <isButton1Press>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	f040 80ad 	bne.w	80008f4 <fsm_auto_mode1_run+0x520>
 800079a:	4b5d      	ldr	r3, [pc, #372]	; (8000910 <fsm_auto_mode1_run+0x53c>)
 800079c:	220a      	movs	r2, #10
 800079e:	601a      	str	r2, [r3, #0]
		break;
 80007a0:	e0a8      	b.n	80008f4 <fsm_auto_mode1_run+0x520>
	case YELLOW_RED:
		HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	4855      	ldr	r0, [pc, #340]	; (8000900 <fsm_auto_mode1_run+0x52c>)
 80007aa:	f001 fa8c 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	4852      	ldr	r0, [pc, #328]	; (8000900 <fsm_auto_mode1_run+0x52c>)
 80007b6:	f001 fa86 	bl	8001cc6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4851      	ldr	r0, [pc, #324]	; (8000904 <fsm_auto_mode1_run+0x530>)
 80007c0:	f001 fa81 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	484f      	ldr	r0, [pc, #316]	; (8000908 <fsm_auto_mode1_run+0x534>)
 80007ca:	f001 fa7c 	bl	8001cc6 <HAL_GPIO_WritePin>

		if(timer1_flag ==1){
 80007ce:	4b4f      	ldr	r3, [pc, #316]	; (800090c <fsm_auto_mode1_run+0x538>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d146      	bne.n	8000864 <fsm_auto_mode1_run+0x490>
			status = RED_GREEN;
 80007d6:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <fsm_auto_mode1_run+0x53c>)
 80007d8:	2202      	movs	r2, #2
 80007da:	601a      	str	r2, [r3, #0]
			red_main = red_dur/1000;
 80007dc:	4b55      	ldr	r3, [pc, #340]	; (8000934 <fsm_auto_mode1_run+0x560>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a55      	ldr	r2, [pc, #340]	; (8000938 <fsm_auto_mode1_run+0x564>)
 80007e2:	fb82 1203 	smull	r1, r2, r2, r3
 80007e6:	1192      	asrs	r2, r2, #6
 80007e8:	17db      	asrs	r3, r3, #31
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	4a53      	ldr	r2, [pc, #332]	; (800093c <fsm_auto_mode1_run+0x568>)
 80007ee:	6013      	str	r3, [r2, #0]
			red_cross = red_dur/1000;
 80007f0:	4b50      	ldr	r3, [pc, #320]	; (8000934 <fsm_auto_mode1_run+0x560>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a50      	ldr	r2, [pc, #320]	; (8000938 <fsm_auto_mode1_run+0x564>)
 80007f6:	fb82 1203 	smull	r1, r2, r2, r3
 80007fa:	1192      	asrs	r2, r2, #6
 80007fc:	17db      	asrs	r3, r3, #31
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	4a49      	ldr	r2, [pc, #292]	; (8000928 <fsm_auto_mode1_run+0x554>)
 8000802:	6013      	str	r3, [r2, #0]
			yellow_main = yellow_dur/1000;
 8000804:	4b44      	ldr	r3, [pc, #272]	; (8000918 <fsm_auto_mode1_run+0x544>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <fsm_auto_mode1_run+0x564>)
 800080a:	fb82 1203 	smull	r1, r2, r2, r3
 800080e:	1192      	asrs	r2, r2, #6
 8000810:	17db      	asrs	r3, r3, #31
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4a4a      	ldr	r2, [pc, #296]	; (8000940 <fsm_auto_mode1_run+0x56c>)
 8000816:	6013      	str	r3, [r2, #0]
			yellow_cross = yellow_dur/1000;
 8000818:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <fsm_auto_mode1_run+0x544>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a46      	ldr	r2, [pc, #280]	; (8000938 <fsm_auto_mode1_run+0x564>)
 800081e:	fb82 1203 	smull	r1, r2, r2, r3
 8000822:	1192      	asrs	r2, r2, #6
 8000824:	17db      	asrs	r3, r3, #31
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	4a46      	ldr	r2, [pc, #280]	; (8000944 <fsm_auto_mode1_run+0x570>)
 800082a:	6013      	str	r3, [r2, #0]
			green_main = green_dur/1000;
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <fsm_auto_mode1_run+0x574>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a41      	ldr	r2, [pc, #260]	; (8000938 <fsm_auto_mode1_run+0x564>)
 8000832:	fb82 1203 	smull	r1, r2, r2, r3
 8000836:	1192      	asrs	r2, r2, #6
 8000838:	17db      	asrs	r3, r3, #31
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	4a38      	ldr	r2, [pc, #224]	; (8000920 <fsm_auto_mode1_run+0x54c>)
 800083e:	6013      	str	r3, [r2, #0]
			green_cross = green_dur/1000;
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <fsm_auto_mode1_run+0x574>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a3c      	ldr	r2, [pc, #240]	; (8000938 <fsm_auto_mode1_run+0x564>)
 8000846:	fb82 1203 	smull	r1, r2, r2, r3
 800084a:	1192      	asrs	r2, r2, #6
 800084c:	17db      	asrs	r3, r3, #31
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	4a3e      	ldr	r2, [pc, #248]	; (800094c <fsm_auto_mode1_run+0x578>)
 8000852:	6013      	str	r3, [r2, #0]
			setTimer1(green_dur);
 8000854:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <fsm_auto_mode1_run+0x574>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fcc1 	bl	80011e0 <setTimer1>
			ind = 0;
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <fsm_auto_mode1_run+0x540>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
		}
		if(timer3_flag==1){
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <fsm_auto_mode1_run+0x548>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d123      	bne.n	80008b4 <fsm_auto_mode1_run+0x4e0>
			char buffer_1[16];
			char buffer_2[16];

			lcd_goto_XY(1, 0);
 800086c:	2100      	movs	r1, #0
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fb10 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_1, "YELLOW1:    %02d", yellow_main);
 8000874:	4b32      	ldr	r3, [pc, #200]	; (8000940 <fsm_auto_mode1_run+0x56c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4934      	ldr	r1, [pc, #208]	; (8000950 <fsm_auto_mode1_run+0x57c>)
 800087e:	4618      	mov	r0, r3
 8000880:	f002 ff0c 	bl	800369c <siprintf>
			lcd_send_string(buffer_1);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fae7 	bl	8000e5c <lcd_send_string>
			 lcd_goto_XY(2, 0);
 800088e:	2100      	movs	r1, #0
 8000890:	2002      	movs	r0, #2
 8000892:	f000 faff 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_2, "RED2:       %02d", red_cross);
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <fsm_auto_mode1_run+0x554>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	463b      	mov	r3, r7
 800089c:	4923      	ldr	r1, [pc, #140]	; (800092c <fsm_auto_mode1_run+0x558>)
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fefc 	bl	800369c <siprintf>
			lcd_send_string(buffer_2);
 80008a4:	463b      	mov	r3, r7
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fad8 	bl	8000e5c <lcd_send_string>
			setTimer3(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f000 fcbe 	bl	8001230 <setTimer3>
		}
		if(timer4_flag==1){
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <fsm_auto_mode1_run+0x55c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d10d      	bne.n	80008d8 <fsm_auto_mode1_run+0x504>
			yellow_main--;
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <fsm_auto_mode1_run+0x56c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	4a1f      	ldr	r2, [pc, #124]	; (8000940 <fsm_auto_mode1_run+0x56c>)
 80008c4:	6013      	str	r3, [r2, #0]
			red_cross--;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <fsm_auto_mode1_run+0x554>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a16      	ldr	r2, [pc, #88]	; (8000928 <fsm_auto_mode1_run+0x554>)
 80008ce:	6013      	str	r3, [r2, #0]
			setTimer4(1000);
 80008d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d4:	f000 fcc0 	bl	8001258 <setTimer4>
		}
		if(isButton1Press() == 1) status = MODE2_BUFF;
 80008d8:	f7ff fc38 	bl	800014c <isButton1Press>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d102      	bne.n	80008e8 <fsm_auto_mode1_run+0x514>
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <fsm_auto_mode1_run+0x53c>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	601a      	str	r2, [r3, #0]
	default:
		break;
 80008e8:	bf00      	nop
 80008ea:	e004      	b.n	80008f6 <fsm_auto_mode1_run+0x522>
		break;
 80008ec:	bf00      	nop
 80008ee:	e002      	b.n	80008f6 <fsm_auto_mode1_run+0x522>
		break;
 80008f0:	bf00      	nop
 80008f2:	e000      	b.n	80008f6 <fsm_auto_mode1_run+0x522>
		break;
 80008f4:	bf00      	nop
	}
}
 80008f6:	bf00      	nop
 80008f8:	3780      	adds	r7, #128	; 0x80
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010800 	.word	0x40010800
 8000904:	40011000 	.word	0x40011000
 8000908:	40010c00 	.word	0x40010c00
 800090c:	20000104 	.word	0x20000104
 8000910:	200000f0 	.word	0x200000f0
 8000914:	200000e0 	.word	0x200000e0
 8000918:	200000f8 	.word	0x200000f8
 800091c:	20000114 	.word	0x20000114
 8000920:	20000150 	.word	0x20000150
 8000924:	08003f64 	.word	0x08003f64
 8000928:	200000d4 	.word	0x200000d4
 800092c:	08003f78 	.word	0x08003f78
 8000930:	2000011c 	.word	0x2000011c
 8000934:	200000fc 	.word	0x200000fc
 8000938:	10624dd3 	.word	0x10624dd3
 800093c:	20000154 	.word	0x20000154
 8000940:	2000014c 	.word	0x2000014c
 8000944:	200000d8 	.word	0x200000d8
 8000948:	200000f4 	.word	0x200000f4
 800094c:	200000dc 	.word	0x200000dc
 8000950:	08003f8c 	.word	0x08003f8c

08000954 <fsm_auto_set_run>:
int set_buff=0;
int num_buffer=0;
int red_set, gre_set, yel_set=0;
int index=0;

void fsm_auto_set_run(){
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
	switch(status){
 800095a:	4b90      	ldr	r3, [pc, #576]	; (8000b9c <fsm_auto_set_run+0x248>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3b0a      	subs	r3, #10
 8000960:	2b03      	cmp	r3, #3
 8000962:	f200 81c3 	bhi.w	8000cec <fsm_auto_set_run+0x398>
 8000966:	a201      	add	r2, pc, #4	; (adr r2, 800096c <fsm_auto_set_run+0x18>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	0800097d 	.word	0x0800097d
 8000970:	080009c9 	.word	0x080009c9
 8000974:	08000abb 	.word	0x08000abb
 8000978:	08000bd1 	.word	0x08000bd1
//		HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);


		HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000982:	4887      	ldr	r0, [pc, #540]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 8000984:	f001 f99f 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098e:	4884      	ldr	r0, [pc, #528]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 8000990:	f001 f999 	bl	8001cc6 <HAL_GPIO_WritePin>


		HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	4882      	ldr	r0, [pc, #520]	; (8000ba4 <fsm_auto_set_run+0x250>)
 800099a:	f001 f994 	bl	8001cc6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	4881      	ldr	r0, [pc, #516]	; (8000ba8 <fsm_auto_set_run+0x254>)
 80009a4:	f001 f98f 	bl	8001cc6 <HAL_GPIO_WritePin>

		status = MODE2;
 80009a8:	4b7c      	ldr	r3, [pc, #496]	; (8000b9c <fsm_auto_set_run+0x248>)
 80009aa:	220b      	movs	r2, #11
 80009ac:	601a      	str	r2, [r3, #0]
		setTimer2(500);
 80009ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b2:	f000 fc29 	bl	8001208 <setTimer2>
		setTimer3(1000);
 80009b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ba:	f000 fc39 	bl	8001230 <setTimer3>
		setTimer5(250);
 80009be:	20fa      	movs	r0, #250	; 0xfa
 80009c0:	f000 fc5e 	bl	8001280 <setTimer5>
		lcd_clear_display();
 80009c4:	f000 fa5f 	bl	8000e86 <lcd_clear_display>
	case MODE2:
		if(timer2_flag==1){
 80009c8:	4b78      	ldr	r3, [pc, #480]	; (8000bac <fsm_auto_set_run+0x258>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d115      	bne.n	80009fc <fsm_auto_set_run+0xa8>
			HAL_GPIO_TogglePin(led1_1_GPIO_Port, led1_1_Pin);
 80009d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d4:	4872      	ldr	r0, [pc, #456]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 80009d6:	f001 f98e 	bl	8001cf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led1_2_GPIO_Port, led1_2_Pin);
 80009da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009de:	4870      	ldr	r0, [pc, #448]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 80009e0:	f001 f989 	bl	8001cf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_1_GPIO_Port, led2_1_Pin);
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	486f      	ldr	r0, [pc, #444]	; (8000ba4 <fsm_auto_set_run+0x250>)
 80009e8:	f001 f985 	bl	8001cf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_2_GPIO_Port, led2_2_Pin);
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	486e      	ldr	r0, [pc, #440]	; (8000ba8 <fsm_auto_set_run+0x254>)
 80009f0:	f001 f981 	bl	8001cf6 <HAL_GPIO_TogglePin>
			setTimer2(500);
 80009f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f8:	f000 fc06 	bl	8001208 <setTimer2>
		}
		if(timer5_flag==1){
 80009fc:	4b6c      	ldr	r3, [pc, #432]	; (8000bb0 <fsm_auto_set_run+0x25c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d11a      	bne.n	8000a3a <fsm_auto_set_run+0xe6>
			char buffer_1[16];

			lcd_goto_XY(1, 0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fa44 	bl	8000e94 <lcd_goto_XY>
			lcd_send_string("MODE2:    RED");
 8000a0c:	4869      	ldr	r0, [pc, #420]	; (8000bb4 <fsm_auto_set_run+0x260>)
 8000a0e:	f000 fa25 	bl	8000e5c <lcd_send_string>
			 lcd_goto_XY(2, 0);
 8000a12:	2100      	movs	r1, #0
 8000a14:	2002      	movs	r0, #2
 8000a16:	f000 fa3d 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_1, "DURATION: %02d", set_buff);
 8000a1a:	4b67      	ldr	r3, [pc, #412]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	4966      	ldr	r1, [pc, #408]	; (8000bbc <fsm_auto_set_run+0x268>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fe39 	bl	800369c <siprintf>
			lcd_send_string(buffer_1);
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fa14 	bl	8000e5c <lcd_send_string>
			setTimer5(100);
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fc23 	bl	8001280 <setTimer5>
		}
		if(isButton1Press() == 1){
 8000a3a:	f7ff fb87 	bl	800014c <isButton1Press>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d120      	bne.n	8000a86 <fsm_auto_set_run+0x132>
			HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4a:	4855      	ldr	r0, [pc, #340]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 8000a4c:	f001 f93b 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a56:	4852      	ldr	r0, [pc, #328]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 8000a58:	f001 f935 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	4850      	ldr	r0, [pc, #320]	; (8000ba4 <fsm_auto_set_run+0x250>)
 8000a62:	f001 f930 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	; 0x40
 8000a6a:	484f      	ldr	r0, [pc, #316]	; (8000ba8 <fsm_auto_set_run+0x254>)
 8000a6c:	f001 f92b 	bl	8001cc6 <HAL_GPIO_WritePin>
			set_buff=0;
 8000a70:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
			index=0;
 8000a76:	4b52      	ldr	r3, [pc, #328]	; (8000bc0 <fsm_auto_set_run+0x26c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
			status = MODE3;
 8000a7c:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <fsm_auto_set_run+0x248>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000a82:	f000 fa00 	bl	8000e86 <lcd_clear_display>
		}
		if(isButton2Press() ==1){
 8000a86:	f7ff fb73 	bl	8000170 <isButton2Press>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d104      	bne.n	8000a9a <fsm_auto_set_run+0x146>
			set_buff+=1;
 8000a90:	4b49      	ldr	r3, [pc, #292]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000a98:	6013      	str	r3, [r2, #0]
		}
		if(isButton3Press() ==1){
 8000a9a:	f7ff fb7b 	bl	8000194 <isButton3Press>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	f040 8125 	bne.w	8000cf0 <fsm_auto_set_run+0x39c>
			red_set = set_buff;
 8000aa6:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a46      	ldr	r2, [pc, #280]	; (8000bc4 <fsm_auto_set_run+0x270>)
 8000aac:	6013      	str	r3, [r2, #0]
			set_buff = 0;
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000ab4:	f000 f9e7 	bl	8000e86 <lcd_clear_display>
		}
		break;
 8000ab8:	e11a      	b.n	8000cf0 <fsm_auto_set_run+0x39c>
	case MODE3:
		if(timer2_flag==1){
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <fsm_auto_set_run+0x258>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10c      	bne.n	8000adc <fsm_auto_set_run+0x188>
			HAL_GPIO_TogglePin(led1_2_GPIO_Port, led1_2_Pin);
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4836      	ldr	r0, [pc, #216]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 8000ac8:	f001 f915 	bl	8001cf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_2_GPIO_Port, led2_2_Pin);
 8000acc:	2140      	movs	r1, #64	; 0x40
 8000ace:	4836      	ldr	r0, [pc, #216]	; (8000ba8 <fsm_auto_set_run+0x254>)
 8000ad0:	f001 f911 	bl	8001cf6 <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad8:	f000 fb96 	bl	8001208 <setTimer2>
		}
		if(timer5_flag==1){
 8000adc:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <fsm_auto_set_run+0x25c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d11a      	bne.n	8000b1a <fsm_auto_set_run+0x1c6>
			char buffer_1[16];

			lcd_goto_XY(1, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 f9d4 	bl	8000e94 <lcd_goto_XY>
			lcd_send_string("MODE2:    YELLOW");
 8000aec:	4836      	ldr	r0, [pc, #216]	; (8000bc8 <fsm_auto_set_run+0x274>)
 8000aee:	f000 f9b5 	bl	8000e5c <lcd_send_string>
			 lcd_goto_XY(2, 0);
 8000af2:	2100      	movs	r1, #0
 8000af4:	2002      	movs	r0, #2
 8000af6:	f000 f9cd 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_1, "DURATION: %02d", set_buff);
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	492e      	ldr	r1, [pc, #184]	; (8000bbc <fsm_auto_set_run+0x268>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fdc9 	bl	800369c <siprintf>
			lcd_send_string(buffer_1);
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f9a4 	bl	8000e5c <lcd_send_string>
			setTimer5(100);
 8000b14:	2064      	movs	r0, #100	; 0x64
 8000b16:	f000 fbb3 	bl	8001280 <setTimer5>
		}
		if(isButton1Press() == 1){
 8000b1a:	f7ff fb17 	bl	800014c <isButton1Press>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d120      	bne.n	8000b66 <fsm_auto_set_run+0x212>
			HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 8000b2c:	f001 f8cb 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_2_GPIO_Port, led1_2_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <fsm_auto_set_run+0x24c>)
 8000b38:	f001 f8c5 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <fsm_auto_set_run+0x250>)
 8000b42:	f001 f8c0 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <fsm_auto_set_run+0x254>)
 8000b4c:	f001 f8bb 	bl	8001cc6 <HAL_GPIO_WritePin>
			status = MODE4;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <fsm_auto_set_run+0x248>)
 8000b52:	220d      	movs	r2, #13
 8000b54:	601a      	str	r2, [r3, #0]
			set_buff=0;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
			index=0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <fsm_auto_set_run+0x26c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000b62:	f000 f990 	bl	8000e86 <lcd_clear_display>
		}
		if(isButton2Press() ==1){
 8000b66:	f7ff fb03 	bl	8000170 <isButton2Press>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d104      	bne.n	8000b7a <fsm_auto_set_run+0x226>
			set_buff+=1;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000b78:	6013      	str	r3, [r2, #0]
		}
		if(isButton3Press() ==1){
 8000b7a:	f7ff fb0b 	bl	8000194 <isButton3Press>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f040 80b7 	bne.w	8000cf4 <fsm_auto_set_run+0x3a0>
			yel_set = set_buff;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <fsm_auto_set_run+0x278>)
 8000b8c:	6013      	str	r3, [r2, #0]
			set_buff = 0;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <fsm_auto_set_run+0x264>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000b94:	f000 f977 	bl	8000e86 <lcd_clear_display>
		}
		break;
 8000b98:	e0ac      	b.n	8000cf4 <fsm_auto_set_run+0x3a0>
 8000b9a:	bf00      	nop
 8000b9c:	200000f0 	.word	0x200000f0
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	2000010c 	.word	0x2000010c
 8000bb0:	20000124 	.word	0x20000124
 8000bb4:	08003fa0 	.word	0x08003fa0
 8000bb8:	200000e4 	.word	0x200000e4
 8000bbc:	08003fb0 	.word	0x08003fb0
 8000bc0:	200000ec 	.word	0x200000ec
 8000bc4:	20000158 	.word	0x20000158
 8000bc8:	08003fc0 	.word	0x08003fc0
 8000bcc:	200000e8 	.word	0x200000e8
	case MODE4:
		if(timer2_flag==1){
 8000bd0:	4b4c      	ldr	r3, [pc, #304]	; (8000d04 <fsm_auto_set_run+0x3b0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d10c      	bne.n	8000bf2 <fsm_auto_set_run+0x29e>
			HAL_GPIO_TogglePin(led1_1_GPIO_Port, led1_1_Pin);
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	484a      	ldr	r0, [pc, #296]	; (8000d08 <fsm_auto_set_run+0x3b4>)
 8000bde:	f001 f88a 	bl	8001cf6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_1_GPIO_Port, led2_1_Pin);
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	4849      	ldr	r0, [pc, #292]	; (8000d0c <fsm_auto_set_run+0x3b8>)
 8000be6:	f001 f886 	bl	8001cf6 <HAL_GPIO_TogglePin>
			setTimer2(500);
 8000bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bee:	f000 fb0b 	bl	8001208 <setTimer2>
		}
		if(timer5_flag==1){
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <fsm_auto_set_run+0x3bc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d118      	bne.n	8000c2c <fsm_auto_set_run+0x2d8>
			char buffer_1[16];

			lcd_goto_XY(1, 0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 f949 	bl	8000e94 <lcd_goto_XY>
			lcd_send_string("MODE2:    GREEN");
 8000c02:	4844      	ldr	r0, [pc, #272]	; (8000d14 <fsm_auto_set_run+0x3c0>)
 8000c04:	f000 f92a 	bl	8000e5c <lcd_send_string>
			 lcd_goto_XY(2, 0);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f000 f942 	bl	8000e94 <lcd_goto_XY>
			sprintf(buffer_1, "DURATION: %02d", set_buff);
 8000c10:	4b41      	ldr	r3, [pc, #260]	; (8000d18 <fsm_auto_set_run+0x3c4>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	463b      	mov	r3, r7
 8000c16:	4941      	ldr	r1, [pc, #260]	; (8000d1c <fsm_auto_set_run+0x3c8>)
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fd3f 	bl	800369c <siprintf>
			lcd_send_string(buffer_1);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f91b 	bl	8000e5c <lcd_send_string>
			setTimer5(100);
 8000c26:	2064      	movs	r0, #100	; 0x64
 8000c28:	f000 fb2a 	bl	8001280 <setTimer5>
		}
		if(isButton1Press() == 1){
 8000c2c:	f7ff fa8e 	bl	800014c <isButton1Press>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d141      	bne.n	8000cba <fsm_auto_set_run+0x366>
			if(red_set == gre_set + yel_set){
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <fsm_auto_set_run+0x3cc>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <fsm_auto_set_run+0x3d0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	441a      	add	r2, r3
 8000c40:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <fsm_auto_set_run+0x3d4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d117      	bne.n	8000c78 <fsm_auto_set_run+0x324>
				red_dur = red_set*1000;
 8000c48:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <fsm_auto_set_run+0x3d4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <fsm_auto_set_run+0x3d8>)
 8000c56:	6013      	str	r3, [r2, #0]
				yellow_dur = yel_set*1000;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <fsm_auto_set_run+0x3d0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c60:	fb02 f303 	mul.w	r3, r2, r3
 8000c64:	4a32      	ldr	r2, [pc, #200]	; (8000d30 <fsm_auto_set_run+0x3dc>)
 8000c66:	6013      	str	r3, [r2, #0]
				green_dur = gre_set * 1000;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <fsm_auto_set_run+0x3cc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	4a2f      	ldr	r2, [pc, #188]	; (8000d34 <fsm_auto_set_run+0x3e0>)
 8000c76:	6013      	str	r3, [r2, #0]
			}
			HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_1_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7e:	4822      	ldr	r0, [pc, #136]	; (8000d08 <fsm_auto_set_run+0x3b4>)
 8000c80:	f001 f821 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_1_GPIO_Port, led1_2_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8a:	481f      	ldr	r0, [pc, #124]	; (8000d08 <fsm_auto_set_run+0x3b4>)
 8000c8c:	f001 f81b 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_1_GPIO_Port, led2_1_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	481c      	ldr	r0, [pc, #112]	; (8000d08 <fsm_auto_set_run+0x3b4>)
 8000c96:	f001 f816 	bl	8001cc6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_1_GPIO_Port, led2_2_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	481a      	ldr	r0, [pc, #104]	; (8000d08 <fsm_auto_set_run+0x3b4>)
 8000ca0:	f001 f811 	bl	8001cc6 <HAL_GPIO_WritePin>
			status = INIT;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <fsm_auto_set_run+0x3e4>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
			set_buff=0;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <fsm_auto_set_run+0x3c4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
			index=0;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <fsm_auto_set_run+0x3e8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000cb6:	f000 f8e6 	bl	8000e86 <lcd_clear_display>
		}
		if(isButton2Press() ==1){
 8000cba:	f7ff fa59 	bl	8000170 <isButton2Press>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d104      	bne.n	8000cce <fsm_auto_set_run+0x37a>
			set_buff+=1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <fsm_auto_set_run+0x3c4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <fsm_auto_set_run+0x3c4>)
 8000ccc:	6013      	str	r3, [r2, #0]
		}
		if(isButton3Press() ==1){
 8000cce:	f7ff fa61 	bl	8000194 <isButton3Press>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d10f      	bne.n	8000cf8 <fsm_auto_set_run+0x3a4>
			gre_set = set_buff;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <fsm_auto_set_run+0x3c4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <fsm_auto_set_run+0x3cc>)
 8000cde:	6013      	str	r3, [r2, #0]
			set_buff = 0;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <fsm_auto_set_run+0x3c4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000ce6:	f000 f8ce 	bl	8000e86 <lcd_clear_display>
		}
		break;
 8000cea:	e005      	b.n	8000cf8 <fsm_auto_set_run+0x3a4>
	default:
		break;
 8000cec:	bf00      	nop
 8000cee:	e004      	b.n	8000cfa <fsm_auto_set_run+0x3a6>
		break;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <fsm_auto_set_run+0x3a6>
		break;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <fsm_auto_set_run+0x3a6>
		break;
 8000cf8:	bf00      	nop
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3730      	adds	r7, #48	; 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000010c 	.word	0x2000010c
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	20000124 	.word	0x20000124
 8000d14:	08003fd4 	.word	0x08003fd4
 8000d18:	200000e4 	.word	0x200000e4
 8000d1c:	08003fb0 	.word	0x08003fb0
 8000d20:	2000015c 	.word	0x2000015c
 8000d24:	200000e8 	.word	0x200000e8
 8000d28:	20000158 	.word	0x20000158
 8000d2c:	200000fc 	.word	0x200000fc
 8000d30:	200000f8 	.word	0x200000f8
 8000d34:	200000f4 	.word	0x200000f4
 8000d38:	200000f0 	.word	0x200000f0
 8000d3c:	200000ec 	.word	0x200000ec

08000d40 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f023 030f 	bic.w	r3, r3, #15
 8000d50:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	f043 030c 	orr.w	r3, r3, #12
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	f043 030c 	orr.w	r3, r3, #12
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d80:	f107 0208 	add.w	r2, r7, #8
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2304      	movs	r3, #4
 8000d8a:	2142      	movs	r1, #66	; 0x42
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <lcd_send_cmd+0x5c>)
 8000d8e:	f001 f90f 	bl	8001fb0 <HAL_I2C_Master_Transmit>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000160 	.word	0x20000160

08000da0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f023 030f 	bic.w	r3, r3, #15
 8000db0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	f043 030d 	orr.w	r3, r3, #13
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	f043 0309 	orr.w	r3, r3, #9
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000dcc:	7bbb      	ldrb	r3, [r7, #14]
 8000dce:	f043 030d 	orr.w	r3, r3, #13
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	f043 0309 	orr.w	r3, r3, #9
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000de0:	f107 0208 	add.w	r2, r7, #8
 8000de4:	2364      	movs	r3, #100	; 0x64
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2304      	movs	r3, #4
 8000dea:	2142      	movs	r1, #66	; 0x42
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <lcd_send_data+0x5c>)
 8000dee:	f001 f8df 	bl	8001fb0 <HAL_I2C_Master_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000160 	.word	0x20000160

08000e00 <lcd_init>:

void lcd_init (void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000e04:	2033      	movs	r0, #51	; 0x33
 8000e06:	f7ff ff9b 	bl	8000d40 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000e0a:	2032      	movs	r0, #50	; 0x32
 8000e0c:	f7ff ff98 	bl	8000d40 <lcd_send_cmd>
	HAL_Delay(50);
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f000 fc8b 	bl	800172c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000e16:	2028      	movs	r0, #40	; 0x28
 8000e18:	f7ff ff92 	bl	8000d40 <lcd_send_cmd>
	HAL_Delay(50);
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f000 fc85 	bl	800172c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff ff8c 	bl	8000d40 <lcd_send_cmd>
	HAL_Delay(50);
 8000e28:	2032      	movs	r0, #50	; 0x32
 8000e2a:	f000 fc7f 	bl	800172c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f7ff ff86 	bl	8000d40 <lcd_send_cmd>
	HAL_Delay(50);
 8000e34:	2032      	movs	r0, #50	; 0x32
 8000e36:	f000 fc79 	bl	800172c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000e3a:	200c      	movs	r0, #12
 8000e3c:	f7ff ff80 	bl	8000d40 <lcd_send_cmd>
	HAL_Delay(50);
 8000e40:	2032      	movs	r0, #50	; 0x32
 8000e42:	f000 fc73 	bl	800172c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000e46:	2002      	movs	r0, #2
 8000e48:	f7ff ff7a 	bl	8000d40 <lcd_send_cmd>
	HAL_Delay(50);
 8000e4c:	2032      	movs	r0, #50	; 0x32
 8000e4e:	f000 fc6d 	bl	800172c <HAL_Delay>
	lcd_send_cmd (0x80);
 8000e52:	2080      	movs	r0, #128	; 0x80
 8000e54:	f7ff ff74 	bl	8000d40 <lcd_send_cmd>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e64:	e006      	b.n	8000e74 <lcd_send_string+0x18>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff96 	bl	8000da0 <lcd_send_data>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f4      	bne.n	8000e66 <lcd_send_string+0xa>
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff ff58 	bl	8000d40 <lcd_send_cmd>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d108      	bne.n	8000eb6 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	337f      	adds	r3, #127	; 0x7f
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e008      	b.n	8000ec8 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3340      	adds	r3, #64	; 0x40
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff38 	bl	8000d40 <lcd_send_cmd>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 fbc4 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f82a 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 f8e4 	bl	80010b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ee8:	f000 f896 	bl	8001018 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000eec:	f000 f866 	bl	8000fbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <main+0x4c>)
 8000ef2:	f001 ffff 	bl	8002ef4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 // setTimer1(100);
  status = INIT;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <main+0x50>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
  green_dur = 3000;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <main+0x54>)
 8000efe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f02:	601a      	str	r2, [r3, #0]
  yellow_dur = 2000;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <main+0x58>)
 8000f06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f0a:	601a      	str	r2, [r3, #0]
  red_dur = 5000;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <main+0x5c>)
 8000f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f12:	601a      	str	r2, [r3, #0]
  lcd_init();
 8000f14:	f7ff ff74 	bl	8000e00 <lcd_init>
//  lcd_goto_XY(2, 0);
//  lcd_send_string ("goodbye hell");
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_auto_mode1_run();
 8000f18:	f7ff fa5c 	bl	80003d4 <fsm_auto_mode1_run>
	  fsm_auto_set_run();
 8000f1c:	f7ff fd1a 	bl	8000954 <fsm_auto_set_run>
	  fsm_auto_mode1_run();
 8000f20:	e7fa      	b.n	8000f18 <main+0x40>
 8000f22:	bf00      	nop
 8000f24:	200001b4 	.word	0x200001b4
 8000f28:	200000f0 	.word	0x200000f0
 8000f2c:	200000f4 	.word	0x200000f4
 8000f30:	200000f8 	.word	0x200000f8
 8000f34:	200000fc 	.word	0x200000fc

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b090      	sub	sp, #64	; 0x40
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2228      	movs	r2, #40	; 0x28
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fba0 	bl	800368c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2310      	movs	r3, #16
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f6e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fb71 	bl	8002660 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f84:	f000 f926 	bl	80011d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fddc 	bl	8002b60 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fae:	f000 f911 	bl	80011d4 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3740      	adds	r7, #64	; 0x40
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f000 fe95 	bl	8001d28 <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 f8e6 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000160 	.word	0x20000160
 8001010:	40005400 	.word	0x40005400
 8001014:	000186a0 	.word	0x000186a0

08001018 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_TIM2_Init+0x94>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_TIM2_Init+0x94>)
 800103e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001042:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_TIM2_Init+0x94>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_TIM2_Init+0x94>)
 800104c:	2209      	movs	r2, #9
 800104e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_TIM2_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105c:	4813      	ldr	r0, [pc, #76]	; (80010ac <MX_TIM2_Init+0x94>)
 800105e:	f001 fef9 	bl	8002e54 <HAL_TIM_Base_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001068:	f000 f8b4 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_TIM2_Init+0x94>)
 800107a:	f002 f87d 	bl	8003178 <HAL_TIM_ConfigClockSource>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001084:	f000 f8a6 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_TIM2_Init+0x94>)
 8001096:	f002 fa5f 	bl	8003558 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010a0:	f000 f898 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001b4 	.word	0x200001b4

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	4b37      	ldr	r3, [pc, #220]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a36      	ldr	r2, [pc, #216]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <MX_GPIO_Init+0xf4>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_GPIO_Init+0xf4>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_1_GPIO_Port, led2_1_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	4825      	ldr	r0, [pc, #148]	; (80011a8 <MX_GPIO_Init+0xf8>)
 8001112:	f000 fdd8 	bl	8001cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_1_Pin|led1_2_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7140 	mov.w	r1, #768	; 0x300
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_GPIO_Init+0xfc>)
 800111e:	f000 fdd2 	bl	8001cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_2_GPIO_Port, led2_2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <MX_GPIO_Init+0x100>)
 8001128:	f000 fdcd 	bl	8001cc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led2_1_Pin */
  GPIO_InitStruct.Pin = led2_1_Pin;
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led2_1_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <MX_GPIO_Init+0xf8>)
 8001144:	f000 fc24 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_1_Pin led1_2_Pin */
  GPIO_InitStruct.Pin = led1_1_Pin|led1_2_Pin;
 8001148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_GPIO_Init+0xfc>)
 8001162:	f000 fc15 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT3_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT3_Pin|BUT2_Pin;
 8001166:	2338      	movs	r3, #56	; 0x38
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_GPIO_Init+0x100>)
 800117a:	f000 fc09 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_2_Pin */
  GPIO_InitStruct.Pin = led2_2_Pin;
 800117e:	2340      	movs	r3, #64	; 0x40
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led2_2_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_GPIO_Init+0x100>)
 8001196:	f000 fbfb 	bl	8001990 <HAL_GPIO_Init>

}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	timerRun();
 80011bc:	f000 f874 	bl	80012a8 <timerRun>
	getKeyInput();
 80011c0:	f7ff f81e 	bl	8000200 <getKeyInput>
	getKeyInput_2();
 80011c4:	f7ff f86a 	bl	800029c <getKeyInput_2>
	getKeyInput_3();
 80011c8:	f7ff f8b6 	bl	8000338 <getKeyInput_3>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <setTimer1>:
int timer7_counter = 0;
int timer7_flag=0;
int timer8_counter = 0;
int timer8_flag=0;

void setTimer1(int duration){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <setTimer1+0x20>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <setTimer1+0x24>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000100 	.word	0x20000100
 8001204:	20000104 	.word	0x20000104

08001208 <setTimer2>:

void setTimer2(int duration){
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001210:	4a05      	ldr	r2, [pc, #20]	; (8001228 <setTimer2+0x20>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <setTimer2+0x24>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000108 	.word	0x20000108
 800122c:	2000010c 	.word	0x2000010c

08001230 <setTimer3>:

void setTimer3(int duration){
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001238:	4a05      	ldr	r2, [pc, #20]	; (8001250 <setTimer3+0x20>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <setTimer3+0x24>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000110 	.word	0x20000110
 8001254:	20000114 	.word	0x20000114

08001258 <setTimer4>:
void setTimer4(int duration){
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <setTimer4+0x20>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <setTimer4+0x24>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000118 	.word	0x20000118
 800127c:	2000011c 	.word	0x2000011c

08001280 <setTimer5>:
void setTimer5(int duration){
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <setTimer5+0x20>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <setTimer5+0x24>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000120 	.word	0x20000120
 80012a4:	20000124 	.word	0x20000124

080012a8 <timerRun>:
}
void setTimer8(int duration){
	timer8_counter = duration;
	timer8_flag=0;
}
void timerRun(){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <timerRun+0x10c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	dd0b      	ble.n	80012cc <timerRun+0x24>
		timer1_counter--;
 80012b4:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <timerRun+0x10c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	4a3e      	ldr	r2, [pc, #248]	; (80013b4 <timerRun+0x10c>)
 80012bc:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <timerRun+0x10c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dc02      	bgt.n	80012cc <timerRun+0x24>
			timer1_flag=1;
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <timerRun+0x110>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80012cc:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <timerRun+0x114>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dd0b      	ble.n	80012ec <timerRun+0x44>
		timer2_counter--;
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <timerRun+0x114>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <timerRun+0x114>)
 80012dc:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <timerRun+0x114>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	dc02      	bgt.n	80012ec <timerRun+0x44>
			timer2_flag=1;
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <timerRun+0x118>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <timerRun+0x11c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dd0b      	ble.n	800130c <timerRun+0x64>
		timer3_counter--;
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <timerRun+0x11c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <timerRun+0x11c>)
 80012fc:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <timerRun+0x11c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	dc02      	bgt.n	800130c <timerRun+0x64>
			timer3_flag=1;
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <timerRun+0x120>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <timerRun+0x124>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd0b      	ble.n	800132c <timerRun+0x84>
		timer4_counter--;
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <timerRun+0x124>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3b01      	subs	r3, #1
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <timerRun+0x124>)
 800131c:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0){
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <timerRun+0x124>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	dc02      	bgt.n	800132c <timerRun+0x84>
			timer4_flag=1;
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <timerRun+0x128>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <timerRun+0x12c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd0b      	ble.n	800134c <timerRun+0xa4>
		timer5_counter--;
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <timerRun+0x12c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <timerRun+0x12c>)
 800133c:	6013      	str	r3, [r2, #0]
		if(timer5_counter<=0){
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <timerRun+0x12c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dc02      	bgt.n	800134c <timerRun+0xa4>
			timer5_flag=1;
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <timerRun+0x130>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <timerRun+0x134>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	dd0b      	ble.n	800136c <timerRun+0xc4>
		timer6_counter--;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <timerRun+0x134>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <timerRun+0x134>)
 800135c:	6013      	str	r3, [r2, #0]
		if(timer6_counter<=0){
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <timerRun+0x134>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	dc02      	bgt.n	800136c <timerRun+0xc4>
			timer6_flag=1;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <timerRun+0x138>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0){
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <timerRun+0x13c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	dd0b      	ble.n	800138c <timerRun+0xe4>
		timer7_counter--;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <timerRun+0x13c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3b01      	subs	r3, #1
 800137a:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <timerRun+0x13c>)
 800137c:	6013      	str	r3, [r2, #0]
		if(timer7_counter<=0){
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <timerRun+0x13c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	dc02      	bgt.n	800138c <timerRun+0xe4>
			timer7_flag=1;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <timerRun+0x140>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0){
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <timerRun+0x144>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dd0b      	ble.n	80013ac <timerRun+0x104>
		timer8_counter--;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <timerRun+0x144>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <timerRun+0x144>)
 800139c:	6013      	str	r3, [r2, #0]
		if(timer8_counter<=0){
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <timerRun+0x144>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dc02      	bgt.n	80013ac <timerRun+0x104>
			timer8_flag=1;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <timerRun+0x148>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000100 	.word	0x20000100
 80013b8:	20000104 	.word	0x20000104
 80013bc:	20000108 	.word	0x20000108
 80013c0:	2000010c 	.word	0x2000010c
 80013c4:	20000110 	.word	0x20000110
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000118 	.word	0x20000118
 80013d0:	2000011c 	.word	0x2000011c
 80013d4:	20000120 	.word	0x20000120
 80013d8:	20000124 	.word	0x20000124
 80013dc:	20000128 	.word	0x20000128
 80013e0:	2000012c 	.word	0x2000012c
 80013e4:	20000130 	.word	0x20000130
 80013e8:	20000134 	.word	0x20000134
 80013ec:	20000138 	.word	0x20000138
 80013f0:	2000013c 	.word	0x2000013c

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_MspInit+0x5c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_MspInit+0x5c>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6193      	str	r3, [r2, #24]
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_MspInit+0x5c>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_MspInit+0x5c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_MspInit+0x5c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_MspInit+0x5c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_MspInit+0x60>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_MspInit+0x60>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000

08001458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_I2C_MspInit+0x90>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d132      	bne.n	80014de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_I2C_MspInit+0x94>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_I2C_MspInit+0x94>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_I2C_MspInit+0x94>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001490:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001496:	2312      	movs	r3, #18
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <HAL_I2C_MspInit+0x98>)
 80014a6:	f000 fa73 	bl	8001990 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_I2C_MspInit+0x9c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_I2C_MspInit+0x9c>)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_I2C_MspInit+0x94>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_I2C_MspInit+0x94>)
 80014cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_I2C_MspInit+0x94>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40005400 	.word	0x40005400
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	40010000 	.word	0x40010000

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001508:	d113      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_TIM_Base_MspInit+0x44>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_TIM_Base_MspInit+0x44>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_TIM_Base_MspInit+0x44>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	201c      	movs	r0, #28
 8001528:	f000 f9fb 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800152c:	201c      	movs	r0, #28
 800152e:	f000 fa14 	bl	800195a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001586:	f000 f8b5 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM2_IRQHandler+0x10>)
 8001596:	f001 fcff 	bl	8002f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001b4 	.word	0x200001b4

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f002 f830 	bl	8003638 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20005000 	.word	0x20005000
 8001604:	00000400 	.word	0x00000400
 8001608:	20000140 	.word	0x20000140
 800160c:	20000210 	.word	0x20000210

08001610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800161c:	f7ff fff8 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001622:	490c      	ldr	r1, [pc, #48]	; (8001654 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001624:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001638:	4c09      	ldr	r4, [pc, #36]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001646:	f001 fffd 	bl	8003644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164a:	f7ff fc45 	bl	8000ed8 <main>
  bx lr
 800164e:	4770      	bx	lr
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001658:	0800404c 	.word	0x0800404c
  ldr r2, =_sbss
 800165c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001660:	20000210 	.word	0x20000210

08001664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_2_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_Init+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_Init+0x28>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 f947 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f808 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff feb6 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40022000 	.word	0x40022000

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x54>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f95f 	bl	8001976 <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e00e      	b.n	80016e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d80a      	bhi.n	80016de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 f927 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_InitTick+0x5c>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000003c 	.word	0x2000003c
 80016ec:	20000044 	.word	0x20000044
 80016f0:	20000040 	.word	0x20000040

080016f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_IncTick+0x1c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_IncTick+0x20>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_IncTick+0x20>)
 8001706:	6013      	str	r3, [r2, #0]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000044 	.word	0x20000044
 8001714:	200001fc 	.word	0x200001fc

08001718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b02      	ldr	r3, [pc, #8]	; (8001728 <HAL_GetTick+0x10>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	200001fc 	.word	0x200001fc

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff fff0 	bl	8001718 <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_Delay+0x44>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffe0 	bl	8001718 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000044 	.word	0x20000044

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <__NVIC_EnableIRQ+0x34>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff90 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff2d 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff42 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff90 	bl	8001864 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5f 	bl	8001810 <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff35 	bl	80017d8 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa2 	bl	80018c8 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b08b      	sub	sp, #44	; 0x2c
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e169      	b.n	8001c78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a4:	2201      	movs	r2, #1
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8158 	bne.w	8001c72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a9a      	ldr	r2, [pc, #616]	; (8001c30 <HAL_GPIO_Init+0x2a0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d05e      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019cc:	4a98      	ldr	r2, [pc, #608]	; (8001c30 <HAL_GPIO_Init+0x2a0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d875      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019d2:	4a98      	ldr	r2, [pc, #608]	; (8001c34 <HAL_GPIO_Init+0x2a4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d058      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019d8:	4a96      	ldr	r2, [pc, #600]	; (8001c34 <HAL_GPIO_Init+0x2a4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d86f      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019de:	4a96      	ldr	r2, [pc, #600]	; (8001c38 <HAL_GPIO_Init+0x2a8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d052      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019e4:	4a94      	ldr	r2, [pc, #592]	; (8001c38 <HAL_GPIO_Init+0x2a8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d869      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019ea:	4a94      	ldr	r2, [pc, #592]	; (8001c3c <HAL_GPIO_Init+0x2ac>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d04c      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019f0:	4a92      	ldr	r2, [pc, #584]	; (8001c3c <HAL_GPIO_Init+0x2ac>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d863      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 80019f6:	4a92      	ldr	r2, [pc, #584]	; (8001c40 <HAL_GPIO_Init+0x2b0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d046      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
 80019fc:	4a90      	ldr	r2, [pc, #576]	; (8001c40 <HAL_GPIO_Init+0x2b0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d85d      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d82a      	bhi.n	8001a5c <HAL_GPIO_Init+0xcc>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d859      	bhi.n	8001abe <HAL_GPIO_Init+0x12e>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <HAL_GPIO_Init+0x80>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a8b 	.word	0x08001a8b
 8001a14:	08001a65 	.word	0x08001a65
 8001a18:	08001a77 	.word	0x08001a77
 8001a1c:	08001ab9 	.word	0x08001ab9
 8001a20:	08001abf 	.word	0x08001abf
 8001a24:	08001abf 	.word	0x08001abf
 8001a28:	08001abf 	.word	0x08001abf
 8001a2c:	08001abf 	.word	0x08001abf
 8001a30:	08001abf 	.word	0x08001abf
 8001a34:	08001abf 	.word	0x08001abf
 8001a38:	08001abf 	.word	0x08001abf
 8001a3c:	08001abf 	.word	0x08001abf
 8001a40:	08001abf 	.word	0x08001abf
 8001a44:	08001abf 	.word	0x08001abf
 8001a48:	08001abf 	.word	0x08001abf
 8001a4c:	08001abf 	.word	0x08001abf
 8001a50:	08001abf 	.word	0x08001abf
 8001a54:	08001a6d 	.word	0x08001a6d
 8001a58:	08001a81 	.word	0x08001a81
 8001a5c:	4a79      	ldr	r2, [pc, #484]	; (8001c44 <HAL_GPIO_Init+0x2b4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a62:	e02c      	b.n	8001abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e029      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	3304      	adds	r3, #4
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e024      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	3308      	adds	r3, #8
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e01f      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	330c      	adds	r3, #12
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e01a      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a92:	2304      	movs	r3, #4
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e013      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	611a      	str	r2, [r3, #16]
          break;
 8001aaa:	e009      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aac:	2308      	movs	r3, #8
 8001aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	615a      	str	r2, [r3, #20]
          break;
 8001ab6:	e003      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
          break;
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x130>
          break;
 8001abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d801      	bhi.n	8001aca <HAL_GPIO_Init+0x13a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	e001      	b.n	8001ace <HAL_GPIO_Init+0x13e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d802      	bhi.n	8001adc <HAL_GPIO_Init+0x14c>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x152>
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	3b08      	subs	r3, #8
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	210f      	movs	r1, #15
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	6a39      	ldr	r1, [r7, #32]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80b1 	beq.w	8001c72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b10:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a4c      	ldr	r2, [pc, #304]	; (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_GPIO_Init+0x2b8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b28:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2bc>)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <HAL_GPIO_Init+0x2c0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <HAL_GPIO_Init+0x1ec>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3f      	ldr	r2, [pc, #252]	; (8001c54 <HAL_GPIO_Init+0x2c4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00d      	beq.n	8001b78 <HAL_GPIO_Init+0x1e8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a3e      	ldr	r2, [pc, #248]	; (8001c58 <HAL_GPIO_Init+0x2c8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d007      	beq.n	8001b74 <HAL_GPIO_Init+0x1e4>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a3d      	ldr	r2, [pc, #244]	; (8001c5c <HAL_GPIO_Init+0x2cc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_GPIO_Init+0x1e0>
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e006      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b70:	2304      	movs	r3, #4
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x1ee>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b8e:	492f      	ldr	r1, [pc, #188]	; (8001c4c <HAL_GPIO_Init+0x2bc>)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	492c      	ldr	r1, [pc, #176]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4928      	ldr	r1, [pc, #160]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4922      	ldr	r1, [pc, #136]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	491e      	ldr	r1, [pc, #120]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4918      	ldr	r1, [pc, #96]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4914      	ldr	r1, [pc, #80]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d021      	beq.n	8001c64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e021      	b.n	8001c72 <HAL_GPIO_Init+0x2e2>
 8001c2e:	bf00      	nop
 8001c30:	10320000 	.word	0x10320000
 8001c34:	10310000 	.word	0x10310000
 8001c38:	10220000 	.word	0x10220000
 8001c3c:	10210000 	.word	0x10210000
 8001c40:	10120000 	.word	0x10120000
 8001c44:	10110000 	.word	0x10110000
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	40010800 	.word	0x40010800
 8001c54:	40010c00 	.word	0x40010c00
 8001c58:	40011000 	.word	0x40011000
 8001c5c:	40011400 	.word	0x40011400
 8001c60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	4909      	ldr	r1, [pc, #36]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f47f ae8e 	bne.w	80019a4 <HAL_GPIO_Init+0x14>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	372c      	adds	r7, #44	; 0x2c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	807b      	strh	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd6:	787b      	ldrb	r3, [r7, #1]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cdc:	887a      	ldrh	r2, [r7, #2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ce2:	e003      	b.n	8001cec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	041a      	lsls	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	041a      	lsls	r2, r3, #16
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	400b      	ands	r3, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e12b      	b.n	8001f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fb82 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	; 0x24
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d8c:	f001 f830 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 8001d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a81      	ldr	r2, [pc, #516]	; (8001f9c <HAL_I2C_Init+0x274>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d807      	bhi.n	8001dac <HAL_I2C_Init+0x84>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a80      	ldr	r2, [pc, #512]	; (8001fa0 <HAL_I2C_Init+0x278>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	bf94      	ite	ls
 8001da4:	2301      	movls	r3, #1
 8001da6:	2300      	movhi	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e006      	b.n	8001dba <HAL_I2C_Init+0x92>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a7d      	ldr	r2, [pc, #500]	; (8001fa4 <HAL_I2C_Init+0x27c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e7      	b.n	8001f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4a78      	ldr	r2, [pc, #480]	; (8001fa8 <HAL_I2C_Init+0x280>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9b      	lsrs	r3, r3, #18
 8001dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a6a      	ldr	r2, [pc, #424]	; (8001f9c <HAL_I2C_Init+0x274>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d802      	bhi.n	8001dfc <HAL_I2C_Init+0xd4>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	e009      	b.n	8001e10 <HAL_I2C_Init+0xe8>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	4a69      	ldr	r2, [pc, #420]	; (8001fac <HAL_I2C_Init+0x284>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	3301      	adds	r3, #1
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	495c      	ldr	r1, [pc, #368]	; (8001f9c <HAL_I2C_Init+0x274>)
 8001e2c:	428b      	cmp	r3, r1
 8001e2e:	d819      	bhi.n	8001e64 <HAL_I2C_Init+0x13c>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e59      	subs	r1, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3e:	1c59      	adds	r1, r3, #1
 8001e40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e44:	400b      	ands	r3, r1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_I2C_Init+0x138>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e59      	subs	r1, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	e051      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e04f      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <HAL_I2C_Init+0x168>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e012      	b.n	8001eb6 <HAL_I2C_Init+0x18e>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Init+0x196>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e022      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_I2C_Init+0x1bc>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e58      	subs	r0, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	440b      	add	r3, r1
 8001ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Init+0x1dc>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6911      	ldr	r1, [r2, #16]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	000186a0 	.word	0x000186a0
 8001fa0:	001e847f 	.word	0x001e847f
 8001fa4:	003d08ff 	.word	0x003d08ff
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	817b      	strh	r3, [r7, #10]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff fba8 	bl	8001718 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	f040 80e0 	bne.w	8002198 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2319      	movs	r3, #25
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4970      	ldr	r1, [pc, #448]	; (80021a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f964 	bl	80022b0 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e0d3      	b.n	800219a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_I2C_Master_Transmit+0x50>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e0cc      	b.n	800219a <HAL_I2C_Master_Transmit+0x1ea>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d007      	beq.n	8002026 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002034:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2221      	movs	r2, #33	; 0x21
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2210      	movs	r2, #16
 8002042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	893a      	ldrh	r2, [r7, #8]
 8002056:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002068:	8979      	ldrh	r1, [r7, #10]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f89c 	bl	80021ac <I2C_MasterRequestWrite>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e08d      	b.n	800219a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002094:	e066      	b.n	8002164 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	6a39      	ldr	r1, [r7, #32]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fa22 	bl	80024e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00d      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d107      	bne.n	80020be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06b      	b.n	800219a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d11b      	bne.n	8002138 <HAL_I2C_Master_Transmit+0x188>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002104:	2b00      	cmp	r3, #0
 8002106:	d017      	beq.n	8002138 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	6a39      	ldr	r1, [r7, #32]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fa19 	bl	8002574 <I2C_WaitOnBTFFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00d      	beq.n	8002164 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b04      	cmp	r3, #4
 800214e:	d107      	bne.n	8002160 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e01a      	b.n	800219a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	d194      	bne.n	8002096 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	00100002 	.word	0x00100002
 80021a8:	ffff0000 	.word	0xffff0000

080021ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	460b      	mov	r3, r1
 80021ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d006      	beq.n	80021d6 <I2C_MasterRequestWrite+0x2a>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d003      	beq.n	80021d6 <I2C_MasterRequestWrite+0x2a>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021d4:	d108      	bne.n	80021e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e00b      	b.n	8002200 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	2b12      	cmp	r3, #18
 80021ee:	d107      	bne.n	8002200 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f84f 	bl	80022b0 <I2C_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002226:	d103      	bne.n	8002230 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e035      	b.n	80022a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800223c:	d108      	bne.n	8002250 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223e:	897b      	ldrh	r3, [r7, #10]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	e01b      	b.n	8002288 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002250:	897b      	ldrh	r3, [r7, #10]
 8002252:	11db      	asrs	r3, r3, #7
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f003 0306 	and.w	r3, r3, #6
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f063 030f 	orn	r3, r3, #15
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <I2C_MasterRequestWrite+0xfc>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f898 	bl	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e010      	b.n	80022a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <I2C_MasterRequestWrite+0x100>)
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f888 	bl	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	00010008 	.word	0x00010008
 80022ac:	00010002 	.word	0x00010002

080022b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c0:	e048      	b.n	8002354 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d044      	beq.n	8002354 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ca:	f7ff fa25 	bl	8001718 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d139      	bne.n	8002354 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10d      	bne.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x56>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	43da      	mvns	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	e00c      	b.n	8002320 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	43da      	mvns	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	4013      	ands	r3, r2
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	429a      	cmp	r2, r3
 8002324:	d116      	bne.n	8002354 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e023      	b.n	800239c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10d      	bne.n	800237a <I2C_WaitOnFlagUntilTimeout+0xca>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	43da      	mvns	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	e00c      	b.n	8002394 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	43da      	mvns	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4013      	ands	r3, r2
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	429a      	cmp	r2, r3
 8002398:	d093      	beq.n	80022c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b2:	e071      	b.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	d123      	bne.n	800240c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e067      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d041      	beq.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7ff f980 	bl	8001718 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d136      	bne.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d10c      	bne.n	800244e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4013      	ands	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	e00b      	b.n	8002466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	43da      	mvns	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f043 0220 	orr.w	r2, r3, #32
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e021      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10c      	bne.n	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	43da      	mvns	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4013      	ands	r3, r2
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf14      	ite	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	2300      	moveq	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e00b      	b.n	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf14      	ite	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f af6d 	bne.w	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f0:	e034      	b.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f886 	bl	8002604 <I2C_IsAcknowledgeFailed>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e034      	b.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d028      	beq.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7ff f905 	bl	8001718 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11d      	bne.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d016      	beq.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e007      	b.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d1c3      	bne.n	80024f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002580:	e034      	b.n	80025ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f83e 	bl	8002604 <I2C_IsAcknowledgeFailed>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e034      	b.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d028      	beq.n	80025ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259a:	f7ff f8bd 	bl	8001718 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11d      	bne.n	80025ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d016      	beq.n	80025ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e007      	b.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d1c3      	bne.n	8002582 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	d11b      	bne.n	8002654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f043 0204 	orr.w	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e26c      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8087 	beq.w	800278e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002680:	4b92      	ldr	r3, [pc, #584]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b04      	cmp	r3, #4
 800268a:	d00c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800268c:	4b8f      	ldr	r3, [pc, #572]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d112      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
 8002698:	4b8c      	ldr	r3, [pc, #560]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d06c      	beq.n	800278c <HAL_RCC_OscConfig+0x12c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d168      	bne.n	800278c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e246      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x76>
 80026c8:	4b80      	ldr	r3, [pc, #512]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a7f      	ldr	r2, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e02e      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7a      	ldr	r2, [pc, #488]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b78      	ldr	r3, [pc, #480]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a77      	ldr	r2, [pc, #476]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0xbc>
 8002702:	4b72      	ldr	r3, [pc, #456]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a71      	ldr	r2, [pc, #452]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 800271c:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6a      	ldr	r2, [pc, #424]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b68      	ldr	r3, [pc, #416]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a67      	ldr	r2, [pc, #412]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe ffec 	bl	8001718 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe ffe8 	bl	8001718 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1fa      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xe4>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe ffd8 	bl	8001718 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe ffd4 	bl	8001718 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1e6      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x10c>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279a:	4b4c      	ldr	r3, [pc, #304]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1ba      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4939      	ldr	r1, [pc, #228]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCC_OscConfig+0x270>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe ff8d 	bl	8001718 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe ff89 	bl	8001718 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e19b      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4927      	ldr	r1, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x270>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe ff6c 	bl	8001718 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe ff68 	bl	8001718 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e17a      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03a      	beq.n	80028e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_RCC_OscConfig+0x274>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe ff4c 	bl	8001718 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe ff48 	bl	8001718 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e15a      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f000 fab8 	bl	8002e18 <RCC_Delay>
 80028a8:	e01c      	b.n	80028e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_RCC_OscConfig+0x274>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe ff32 	bl	8001718 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe ff2e 	bl	8001718 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d908      	bls.n	80028d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e140      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	42420000 	.word	0x42420000
 80028d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b9e      	ldr	r3, [pc, #632]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e9      	bne.n	80028b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a6 	beq.w	8002a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b97      	ldr	r3, [pc, #604]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b94      	ldr	r3, [pc, #592]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a93      	ldr	r2, [pc, #588]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b91      	ldr	r3, [pc, #580]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b8e      	ldr	r3, [pc, #568]	; (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b8b      	ldr	r3, [pc, #556]	; (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a8a      	ldr	r2, [pc, #552]	; (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe feef 	bl	8001718 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe feeb 	bl	8001718 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0fd      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x312>
 8002964:	4b7b      	ldr	r3, [pc, #492]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a7a      	ldr	r2, [pc, #488]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e02d      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x334>
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a75      	ldr	r2, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a72      	ldr	r2, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e01c      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x356>
 800299c:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a6c      	ldr	r2, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a69      	ldr	r2, [pc, #420]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a66      	ldr	r2, [pc, #408]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	4b64      	ldr	r3, [pc, #400]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a63      	ldr	r2, [pc, #396]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fe9f 	bl	8001718 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fe9b 	bl	8001718 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0ab      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	4b57      	ldr	r3, [pc, #348]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ee      	beq.n	80029de <HAL_RCC_OscConfig+0x37e>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe fe89 	bl	8001718 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fe85 	bl	8001718 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e095      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ee      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a47      	ldr	r2, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8081 	beq.w	8002b4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d061      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d146      	bne.n	8002aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <HAL_RCC_OscConfig+0x4fc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fe59 	bl	8001718 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe fe55 	bl	8001718 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e067      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	492d      	ldr	r1, [pc, #180]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a19      	ldr	r1, [r3, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	4927      	ldr	r1, [pc, #156]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_RCC_OscConfig+0x4fc>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fe29 	bl	8001718 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fe25 	bl	8001718 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e037      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x46a>
 8002ae8:	e02f      	b.n	8002b4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_RCC_OscConfig+0x4fc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fe12 	bl	8001718 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fe0e 	bl	8001718 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e020      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x498>
 8002b16:	e018      	b.n	8002b4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e013      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42420060 	.word	0x42420060

08002b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0d0      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d910      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 0207 	bic.w	r2, r3, #7
 8002b8a:	4965      	ldr	r1, [pc, #404]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b8      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b50      	ldr	r3, [pc, #320]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	494d      	ldr	r1, [pc, #308]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d040      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d115      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07f      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e073      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4936      	ldr	r1, [pc, #216]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fd62 	bl	8001718 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fd5e 	bl	8001718 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e053      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d210      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0207 	bic.w	r2, r3, #7
 8002c96:	4922      	ldr	r1, [pc, #136]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e032      	b.n	8002d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4916      	ldr	r1, [pc, #88]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	490e      	ldr	r1, [pc, #56]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cee:	f000 f821 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	490a      	ldr	r1, [pc, #40]	; (8002d28 <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	5ccb      	ldrb	r3, [r1, r3]
 8002d02:	fa22 f303 	lsr.w	r3, r2, r3
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1cc>)
 8002d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1d0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe fcc0 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40022000 	.word	0x40022000
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08003fe4 	.word	0x08003fe4
 8002d2c:	2000003c 	.word	0x2000003c
 8002d30:	20000040 	.word	0x20000040

08002d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x30>
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x36>
 8002d62:	e027      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d66:	613b      	str	r3, [r7, #16]
      break;
 8002d68:	e027      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	0c9b      	lsrs	r3, r3, #18
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d74:	5cd3      	ldrb	r3, [r2, r3]
 8002d76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	0c5b      	lsrs	r3, r3, #17
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	4a11      	ldr	r2, [pc, #68]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002d96:	fb02 f203 	mul.w	r2, r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e004      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	613b      	str	r3, [r7, #16]
      break;
 8002db2:	e002      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002db6:	613b      	str	r3, [r7, #16]
      break;
 8002db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dba:	693b      	ldr	r3, [r7, #16]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	007a1200 	.word	0x007a1200
 8002dd0:	08003ffc 	.word	0x08003ffc
 8002dd4:	0800400c 	.word	0x0800400c
 8002dd8:	003d0900 	.word	0x003d0900

08002ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de0:	4b02      	ldr	r3, [pc, #8]	; (8002dec <HAL_RCC_GetHCLKFreq+0x10>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	2000003c 	.word	0x2000003c

08002df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df4:	f7ff fff2 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4903      	ldr	r1, [pc, #12]	; (8002e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08003ff4 	.word	0x08003ff4

08002e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <RCC_Delay+0x34>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <RCC_Delay+0x38>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	0a5b      	lsrs	r3, r3, #9
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e34:	bf00      	nop
  }
  while (Delay --);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1e5a      	subs	r2, r3, #1
 8002e3a:	60fa      	str	r2, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f9      	bne.n	8002e34 <RCC_Delay+0x1c>
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	2000003c 	.word	0x2000003c
 8002e50:	10624dd3 	.word	0x10624dd3

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e041      	b.n	8002eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe fb3c 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 fa5c 	bl	8003350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d001      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e03a      	b.n	8002f82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <HAL_TIM_Base_Start_IT+0x98>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x58>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d009      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x58>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x58>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d111      	bne.n	8002f70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d010      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	e007      	b.n	8002f80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800

08002f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0202 	mvn.w	r2, #2
 8002fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f998 	bl	8003318 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f98b 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f99a 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0204 	mvn.w	r2, #4
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f972 	bl	8003318 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f965 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f974 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d020      	beq.n	8003094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0208 	mvn.w	r2, #8
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f94c 	bl	8003318 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f93f 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f94e 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d020      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01b      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0210 	mvn.w	r2, #16
 80030b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2208      	movs	r2, #8
 80030b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f926 	bl	8003318 <HAL_TIM_IC_CaptureCallback>
 80030cc:	e005      	b.n	80030da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f919 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f928 	bl	800332a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0201 	mvn.w	r2, #1
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe f858 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa7f 	bl	8003626 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8f8 	bl	800333c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00c      	beq.n	8003170 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0220 	mvn.w	r2, #32
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa52 	bl	8003614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003170:	bf00      	nop
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x1c>
 8003190:	2302      	movs	r3, #2
 8003192:	e0b4      	b.n	80032fe <HAL_TIM_ConfigClockSource+0x186>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d03e      	beq.n	800324c <HAL_TIM_ConfigClockSource+0xd4>
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	f200 8087 	bhi.w	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	f000 8086 	beq.w	80032ea <HAL_TIM_ConfigClockSource+0x172>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d87f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d01a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xa6>
 80031e8:	2b70      	cmp	r3, #112	; 0x70
 80031ea:	d87b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d050      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x11a>
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d877      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d03c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xfa>
 80031f8:	2b50      	cmp	r3, #80	; 0x50
 80031fa:	d873      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d058      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d86f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d064      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d86b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d060      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d867      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003218:	2b10      	cmp	r3, #16
 800321a:	d05a      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 800321c:	e062      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 f974 	bl	800351a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	609a      	str	r2, [r3, #8]
      break;
 800324a:	e04f      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f000 f95d 	bl	800351a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326e:	609a      	str	r2, [r3, #8]
      break;
 8003270:	e03c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 f8d4 	bl	800342c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2150      	movs	r1, #80	; 0x50
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f92b 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 8003290:	e02c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 f8f2 	bl	8003488 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2160      	movs	r1, #96	; 0x60
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f91b 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 80032b0:	e01c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 f8b4 	bl	800342c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f90b 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 80032d0:	e00c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 f902 	bl	80034e6 <TIM_ITRx_SetConfig>
      break;
 80032e2:	e003      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e000      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
	...

08003350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a2f      	ldr	r2, [pc, #188]	; (8003420 <TIM_Base_SetConfig+0xd0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_Base_SetConfig+0x30>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d007      	beq.n	8003380 <TIM_Base_SetConfig+0x30>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a2c      	ldr	r2, [pc, #176]	; (8003424 <TIM_Base_SetConfig+0xd4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0x30>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <TIM_Base_SetConfig+0xd8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d108      	bne.n	8003392 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a22      	ldr	r2, [pc, #136]	; (8003420 <TIM_Base_SetConfig+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00b      	beq.n	80033b2 <TIM_Base_SetConfig+0x62>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d007      	beq.n	80033b2 <TIM_Base_SetConfig+0x62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <TIM_Base_SetConfig+0xd4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d003      	beq.n	80033b2 <TIM_Base_SetConfig+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <TIM_Base_SetConfig+0xd8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d108      	bne.n	80033c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <TIM_Base_SetConfig+0xd0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d103      	bne.n	80033f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]
  }
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800

0800342c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f023 0201 	bic.w	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f023 030a 	bic.w	r3, r3, #10
 8003468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	621a      	str	r2, [r3, #32]
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0210 	bic.w	r2, r3, #16
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	031b      	lsls	r3, r3, #12
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	621a      	str	r2, [r3, #32]
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	f043 0307 	orr.w	r3, r3, #7
 8003508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	609a      	str	r2, [r3, #8]
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800351a:	b480      	push	{r7}
 800351c:	b087      	sub	sp, #28
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003534:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	431a      	orrs	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	609a      	str	r2, [r3, #8]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800356c:	2302      	movs	r3, #2
 800356e:	e046      	b.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d009      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a10      	ldr	r2, [pc, #64]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10c      	bne.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800

08003614 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <__errno>:
 8003638:	4b01      	ldr	r3, [pc, #4]	; (8003640 <__errno+0x8>)
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000048 	.word	0x20000048

08003644 <__libc_init_array>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	2600      	movs	r6, #0
 8003648:	4d0c      	ldr	r5, [pc, #48]	; (800367c <__libc_init_array+0x38>)
 800364a:	4c0d      	ldr	r4, [pc, #52]	; (8003680 <__libc_init_array+0x3c>)
 800364c:	1b64      	subs	r4, r4, r5
 800364e:	10a4      	asrs	r4, r4, #2
 8003650:	42a6      	cmp	r6, r4
 8003652:	d109      	bne.n	8003668 <__libc_init_array+0x24>
 8003654:	f000 fc5c 	bl	8003f10 <_init>
 8003658:	2600      	movs	r6, #0
 800365a:	4d0a      	ldr	r5, [pc, #40]	; (8003684 <__libc_init_array+0x40>)
 800365c:	4c0a      	ldr	r4, [pc, #40]	; (8003688 <__libc_init_array+0x44>)
 800365e:	1b64      	subs	r4, r4, r5
 8003660:	10a4      	asrs	r4, r4, #2
 8003662:	42a6      	cmp	r6, r4
 8003664:	d105      	bne.n	8003672 <__libc_init_array+0x2e>
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	f855 3b04 	ldr.w	r3, [r5], #4
 800366c:	4798      	blx	r3
 800366e:	3601      	adds	r6, #1
 8003670:	e7ee      	b.n	8003650 <__libc_init_array+0xc>
 8003672:	f855 3b04 	ldr.w	r3, [r5], #4
 8003676:	4798      	blx	r3
 8003678:	3601      	adds	r6, #1
 800367a:	e7f2      	b.n	8003662 <__libc_init_array+0x1e>
 800367c:	08004044 	.word	0x08004044
 8003680:	08004044 	.word	0x08004044
 8003684:	08004044 	.word	0x08004044
 8003688:	08004048 	.word	0x08004048

0800368c <memset>:
 800368c:	4603      	mov	r3, r0
 800368e:	4402      	add	r2, r0
 8003690:	4293      	cmp	r3, r2
 8003692:	d100      	bne.n	8003696 <memset+0xa>
 8003694:	4770      	bx	lr
 8003696:	f803 1b01 	strb.w	r1, [r3], #1
 800369a:	e7f9      	b.n	8003690 <memset+0x4>

0800369c <siprintf>:
 800369c:	b40e      	push	{r1, r2, r3}
 800369e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036a2:	b500      	push	{lr}
 80036a4:	b09c      	sub	sp, #112	; 0x70
 80036a6:	ab1d      	add	r3, sp, #116	; 0x74
 80036a8:	9002      	str	r0, [sp, #8]
 80036aa:	9006      	str	r0, [sp, #24]
 80036ac:	9107      	str	r1, [sp, #28]
 80036ae:	9104      	str	r1, [sp, #16]
 80036b0:	4808      	ldr	r0, [pc, #32]	; (80036d4 <siprintf+0x38>)
 80036b2:	4909      	ldr	r1, [pc, #36]	; (80036d8 <siprintf+0x3c>)
 80036b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036b8:	9105      	str	r1, [sp, #20]
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	a902      	add	r1, sp, #8
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	f000 f868 	bl	8003794 <_svfiprintf_r>
 80036c4:	2200      	movs	r2, #0
 80036c6:	9b02      	ldr	r3, [sp, #8]
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	b01c      	add	sp, #112	; 0x70
 80036cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d0:	b003      	add	sp, #12
 80036d2:	4770      	bx	lr
 80036d4:	20000048 	.word	0x20000048
 80036d8:	ffff0208 	.word	0xffff0208

080036dc <__ssputs_r>:
 80036dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e0:	688e      	ldr	r6, [r1, #8]
 80036e2:	4682      	mov	sl, r0
 80036e4:	429e      	cmp	r6, r3
 80036e6:	460c      	mov	r4, r1
 80036e8:	4690      	mov	r8, r2
 80036ea:	461f      	mov	r7, r3
 80036ec:	d838      	bhi.n	8003760 <__ssputs_r+0x84>
 80036ee:	898a      	ldrh	r2, [r1, #12]
 80036f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036f4:	d032      	beq.n	800375c <__ssputs_r+0x80>
 80036f6:	6825      	ldr	r5, [r4, #0]
 80036f8:	6909      	ldr	r1, [r1, #16]
 80036fa:	3301      	adds	r3, #1
 80036fc:	eba5 0901 	sub.w	r9, r5, r1
 8003700:	6965      	ldr	r5, [r4, #20]
 8003702:	444b      	add	r3, r9
 8003704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800370c:	106d      	asrs	r5, r5, #1
 800370e:	429d      	cmp	r5, r3
 8003710:	bf38      	it	cc
 8003712:	461d      	movcc	r5, r3
 8003714:	0553      	lsls	r3, r2, #21
 8003716:	d531      	bpl.n	800377c <__ssputs_r+0xa0>
 8003718:	4629      	mov	r1, r5
 800371a:	f000 fb53 	bl	8003dc4 <_malloc_r>
 800371e:	4606      	mov	r6, r0
 8003720:	b950      	cbnz	r0, 8003738 <__ssputs_r+0x5c>
 8003722:	230c      	movs	r3, #12
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	f8ca 3000 	str.w	r3, [sl]
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003738:	464a      	mov	r2, r9
 800373a:	6921      	ldr	r1, [r4, #16]
 800373c:	f000 face 	bl	8003cdc <memcpy>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	6126      	str	r6, [r4, #16]
 800374e:	444e      	add	r6, r9
 8003750:	6026      	str	r6, [r4, #0]
 8003752:	463e      	mov	r6, r7
 8003754:	6165      	str	r5, [r4, #20]
 8003756:	eba5 0509 	sub.w	r5, r5, r9
 800375a:	60a5      	str	r5, [r4, #8]
 800375c:	42be      	cmp	r6, r7
 800375e:	d900      	bls.n	8003762 <__ssputs_r+0x86>
 8003760:	463e      	mov	r6, r7
 8003762:	4632      	mov	r2, r6
 8003764:	4641      	mov	r1, r8
 8003766:	6820      	ldr	r0, [r4, #0]
 8003768:	f000 fac6 	bl	8003cf8 <memmove>
 800376c:	68a3      	ldr	r3, [r4, #8]
 800376e:	6822      	ldr	r2, [r4, #0]
 8003770:	1b9b      	subs	r3, r3, r6
 8003772:	4432      	add	r2, r6
 8003774:	2000      	movs	r0, #0
 8003776:	60a3      	str	r3, [r4, #8]
 8003778:	6022      	str	r2, [r4, #0]
 800377a:	e7db      	b.n	8003734 <__ssputs_r+0x58>
 800377c:	462a      	mov	r2, r5
 800377e:	f000 fb7b 	bl	8003e78 <_realloc_r>
 8003782:	4606      	mov	r6, r0
 8003784:	2800      	cmp	r0, #0
 8003786:	d1e1      	bne.n	800374c <__ssputs_r+0x70>
 8003788:	4650      	mov	r0, sl
 800378a:	6921      	ldr	r1, [r4, #16]
 800378c:	f000 face 	bl	8003d2c <_free_r>
 8003790:	e7c7      	b.n	8003722 <__ssputs_r+0x46>
	...

08003794 <_svfiprintf_r>:
 8003794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003798:	4698      	mov	r8, r3
 800379a:	898b      	ldrh	r3, [r1, #12]
 800379c:	4607      	mov	r7, r0
 800379e:	061b      	lsls	r3, r3, #24
 80037a0:	460d      	mov	r5, r1
 80037a2:	4614      	mov	r4, r2
 80037a4:	b09d      	sub	sp, #116	; 0x74
 80037a6:	d50e      	bpl.n	80037c6 <_svfiprintf_r+0x32>
 80037a8:	690b      	ldr	r3, [r1, #16]
 80037aa:	b963      	cbnz	r3, 80037c6 <_svfiprintf_r+0x32>
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	f000 fb09 	bl	8003dc4 <_malloc_r>
 80037b2:	6028      	str	r0, [r5, #0]
 80037b4:	6128      	str	r0, [r5, #16]
 80037b6:	b920      	cbnz	r0, 80037c2 <_svfiprintf_r+0x2e>
 80037b8:	230c      	movs	r3, #12
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	e0d1      	b.n	8003966 <_svfiprintf_r+0x1d2>
 80037c2:	2340      	movs	r3, #64	; 0x40
 80037c4:	616b      	str	r3, [r5, #20]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9309      	str	r3, [sp, #36]	; 0x24
 80037ca:	2320      	movs	r3, #32
 80037cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037d0:	2330      	movs	r3, #48	; 0x30
 80037d2:	f04f 0901 	mov.w	r9, #1
 80037d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80037da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003980 <_svfiprintf_r+0x1ec>
 80037de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037e2:	4623      	mov	r3, r4
 80037e4:	469a      	mov	sl, r3
 80037e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037ea:	b10a      	cbz	r2, 80037f0 <_svfiprintf_r+0x5c>
 80037ec:	2a25      	cmp	r2, #37	; 0x25
 80037ee:	d1f9      	bne.n	80037e4 <_svfiprintf_r+0x50>
 80037f0:	ebba 0b04 	subs.w	fp, sl, r4
 80037f4:	d00b      	beq.n	800380e <_svfiprintf_r+0x7a>
 80037f6:	465b      	mov	r3, fp
 80037f8:	4622      	mov	r2, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	4638      	mov	r0, r7
 80037fe:	f7ff ff6d 	bl	80036dc <__ssputs_r>
 8003802:	3001      	adds	r0, #1
 8003804:	f000 80aa 	beq.w	800395c <_svfiprintf_r+0x1c8>
 8003808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800380a:	445a      	add	r2, fp
 800380c:	9209      	str	r2, [sp, #36]	; 0x24
 800380e:	f89a 3000 	ldrb.w	r3, [sl]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80a2 	beq.w	800395c <_svfiprintf_r+0x1c8>
 8003818:	2300      	movs	r3, #0
 800381a:	f04f 32ff 	mov.w	r2, #4294967295
 800381e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003822:	f10a 0a01 	add.w	sl, sl, #1
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	9307      	str	r3, [sp, #28]
 800382a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800382e:	931a      	str	r3, [sp, #104]	; 0x68
 8003830:	4654      	mov	r4, sl
 8003832:	2205      	movs	r2, #5
 8003834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003838:	4851      	ldr	r0, [pc, #324]	; (8003980 <_svfiprintf_r+0x1ec>)
 800383a:	f000 fa41 	bl	8003cc0 <memchr>
 800383e:	9a04      	ldr	r2, [sp, #16]
 8003840:	b9d8      	cbnz	r0, 800387a <_svfiprintf_r+0xe6>
 8003842:	06d0      	lsls	r0, r2, #27
 8003844:	bf44      	itt	mi
 8003846:	2320      	movmi	r3, #32
 8003848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800384c:	0711      	lsls	r1, r2, #28
 800384e:	bf44      	itt	mi
 8003850:	232b      	movmi	r3, #43	; 0x2b
 8003852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003856:	f89a 3000 	ldrb.w	r3, [sl]
 800385a:	2b2a      	cmp	r3, #42	; 0x2a
 800385c:	d015      	beq.n	800388a <_svfiprintf_r+0xf6>
 800385e:	4654      	mov	r4, sl
 8003860:	2000      	movs	r0, #0
 8003862:	f04f 0c0a 	mov.w	ip, #10
 8003866:	9a07      	ldr	r2, [sp, #28]
 8003868:	4621      	mov	r1, r4
 800386a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800386e:	3b30      	subs	r3, #48	; 0x30
 8003870:	2b09      	cmp	r3, #9
 8003872:	d94e      	bls.n	8003912 <_svfiprintf_r+0x17e>
 8003874:	b1b0      	cbz	r0, 80038a4 <_svfiprintf_r+0x110>
 8003876:	9207      	str	r2, [sp, #28]
 8003878:	e014      	b.n	80038a4 <_svfiprintf_r+0x110>
 800387a:	eba0 0308 	sub.w	r3, r0, r8
 800387e:	fa09 f303 	lsl.w	r3, r9, r3
 8003882:	4313      	orrs	r3, r2
 8003884:	46a2      	mov	sl, r4
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	e7d2      	b.n	8003830 <_svfiprintf_r+0x9c>
 800388a:	9b03      	ldr	r3, [sp, #12]
 800388c:	1d19      	adds	r1, r3, #4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	9103      	str	r1, [sp, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	bfbb      	ittet	lt
 8003896:	425b      	neglt	r3, r3
 8003898:	f042 0202 	orrlt.w	r2, r2, #2
 800389c:	9307      	strge	r3, [sp, #28]
 800389e:	9307      	strlt	r3, [sp, #28]
 80038a0:	bfb8      	it	lt
 80038a2:	9204      	strlt	r2, [sp, #16]
 80038a4:	7823      	ldrb	r3, [r4, #0]
 80038a6:	2b2e      	cmp	r3, #46	; 0x2e
 80038a8:	d10c      	bne.n	80038c4 <_svfiprintf_r+0x130>
 80038aa:	7863      	ldrb	r3, [r4, #1]
 80038ac:	2b2a      	cmp	r3, #42	; 0x2a
 80038ae:	d135      	bne.n	800391c <_svfiprintf_r+0x188>
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	3402      	adds	r4, #2
 80038b4:	1d1a      	adds	r2, r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	9203      	str	r2, [sp, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfb8      	it	lt
 80038be:	f04f 33ff 	movlt.w	r3, #4294967295
 80038c2:	9305      	str	r3, [sp, #20]
 80038c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003990 <_svfiprintf_r+0x1fc>
 80038c8:	2203      	movs	r2, #3
 80038ca:	4650      	mov	r0, sl
 80038cc:	7821      	ldrb	r1, [r4, #0]
 80038ce:	f000 f9f7 	bl	8003cc0 <memchr>
 80038d2:	b140      	cbz	r0, 80038e6 <_svfiprintf_r+0x152>
 80038d4:	2340      	movs	r3, #64	; 0x40
 80038d6:	eba0 000a 	sub.w	r0, r0, sl
 80038da:	fa03 f000 	lsl.w	r0, r3, r0
 80038de:	9b04      	ldr	r3, [sp, #16]
 80038e0:	3401      	adds	r4, #1
 80038e2:	4303      	orrs	r3, r0
 80038e4:	9304      	str	r3, [sp, #16]
 80038e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ea:	2206      	movs	r2, #6
 80038ec:	4825      	ldr	r0, [pc, #148]	; (8003984 <_svfiprintf_r+0x1f0>)
 80038ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038f2:	f000 f9e5 	bl	8003cc0 <memchr>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d038      	beq.n	800396c <_svfiprintf_r+0x1d8>
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <_svfiprintf_r+0x1f4>)
 80038fc:	bb1b      	cbnz	r3, 8003946 <_svfiprintf_r+0x1b2>
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	3307      	adds	r3, #7
 8003902:	f023 0307 	bic.w	r3, r3, #7
 8003906:	3308      	adds	r3, #8
 8003908:	9303      	str	r3, [sp, #12]
 800390a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800390c:	4433      	add	r3, r6
 800390e:	9309      	str	r3, [sp, #36]	; 0x24
 8003910:	e767      	b.n	80037e2 <_svfiprintf_r+0x4e>
 8003912:	460c      	mov	r4, r1
 8003914:	2001      	movs	r0, #1
 8003916:	fb0c 3202 	mla	r2, ip, r2, r3
 800391a:	e7a5      	b.n	8003868 <_svfiprintf_r+0xd4>
 800391c:	2300      	movs	r3, #0
 800391e:	f04f 0c0a 	mov.w	ip, #10
 8003922:	4619      	mov	r1, r3
 8003924:	3401      	adds	r4, #1
 8003926:	9305      	str	r3, [sp, #20]
 8003928:	4620      	mov	r0, r4
 800392a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800392e:	3a30      	subs	r2, #48	; 0x30
 8003930:	2a09      	cmp	r2, #9
 8003932:	d903      	bls.n	800393c <_svfiprintf_r+0x1a8>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0c5      	beq.n	80038c4 <_svfiprintf_r+0x130>
 8003938:	9105      	str	r1, [sp, #20]
 800393a:	e7c3      	b.n	80038c4 <_svfiprintf_r+0x130>
 800393c:	4604      	mov	r4, r0
 800393e:	2301      	movs	r3, #1
 8003940:	fb0c 2101 	mla	r1, ip, r1, r2
 8003944:	e7f0      	b.n	8003928 <_svfiprintf_r+0x194>
 8003946:	ab03      	add	r3, sp, #12
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	462a      	mov	r2, r5
 800394c:	4638      	mov	r0, r7
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <_svfiprintf_r+0x1f8>)
 8003950:	a904      	add	r1, sp, #16
 8003952:	f3af 8000 	nop.w
 8003956:	1c42      	adds	r2, r0, #1
 8003958:	4606      	mov	r6, r0
 800395a:	d1d6      	bne.n	800390a <_svfiprintf_r+0x176>
 800395c:	89ab      	ldrh	r3, [r5, #12]
 800395e:	065b      	lsls	r3, r3, #25
 8003960:	f53f af2c 	bmi.w	80037bc <_svfiprintf_r+0x28>
 8003964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003966:	b01d      	add	sp, #116	; 0x74
 8003968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396c:	ab03      	add	r3, sp, #12
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	462a      	mov	r2, r5
 8003972:	4638      	mov	r0, r7
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <_svfiprintf_r+0x1f8>)
 8003976:	a904      	add	r1, sp, #16
 8003978:	f000 f87c 	bl	8003a74 <_printf_i>
 800397c:	e7eb      	b.n	8003956 <_svfiprintf_r+0x1c2>
 800397e:	bf00      	nop
 8003980:	0800400e 	.word	0x0800400e
 8003984:	08004018 	.word	0x08004018
 8003988:	00000000 	.word	0x00000000
 800398c:	080036dd 	.word	0x080036dd
 8003990:	08004014 	.word	0x08004014

08003994 <_printf_common>:
 8003994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	4616      	mov	r6, r2
 800399a:	4699      	mov	r9, r3
 800399c:	688a      	ldr	r2, [r1, #8]
 800399e:	690b      	ldr	r3, [r1, #16]
 80039a0:	4607      	mov	r7, r0
 80039a2:	4293      	cmp	r3, r2
 80039a4:	bfb8      	it	lt
 80039a6:	4613      	movlt	r3, r2
 80039a8:	6033      	str	r3, [r6, #0]
 80039aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039ae:	460c      	mov	r4, r1
 80039b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039b4:	b10a      	cbz	r2, 80039ba <_printf_common+0x26>
 80039b6:	3301      	adds	r3, #1
 80039b8:	6033      	str	r3, [r6, #0]
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	0699      	lsls	r1, r3, #26
 80039be:	bf42      	ittt	mi
 80039c0:	6833      	ldrmi	r3, [r6, #0]
 80039c2:	3302      	addmi	r3, #2
 80039c4:	6033      	strmi	r3, [r6, #0]
 80039c6:	6825      	ldr	r5, [r4, #0]
 80039c8:	f015 0506 	ands.w	r5, r5, #6
 80039cc:	d106      	bne.n	80039dc <_printf_common+0x48>
 80039ce:	f104 0a19 	add.w	sl, r4, #25
 80039d2:	68e3      	ldr	r3, [r4, #12]
 80039d4:	6832      	ldr	r2, [r6, #0]
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	42ab      	cmp	r3, r5
 80039da:	dc28      	bgt.n	8003a2e <_printf_common+0x9a>
 80039dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039e0:	1e13      	subs	r3, r2, #0
 80039e2:	6822      	ldr	r2, [r4, #0]
 80039e4:	bf18      	it	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	0692      	lsls	r2, r2, #26
 80039ea:	d42d      	bmi.n	8003a48 <_printf_common+0xb4>
 80039ec:	4649      	mov	r1, r9
 80039ee:	4638      	mov	r0, r7
 80039f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039f4:	47c0      	blx	r8
 80039f6:	3001      	adds	r0, #1
 80039f8:	d020      	beq.n	8003a3c <_printf_common+0xa8>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	68e5      	ldr	r5, [r4, #12]
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf18      	it	ne
 8003a06:	2500      	movne	r5, #0
 8003a08:	6832      	ldr	r2, [r6, #0]
 8003a0a:	f04f 0600 	mov.w	r6, #0
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	bf08      	it	eq
 8003a12:	1aad      	subeq	r5, r5, r2
 8003a14:	6922      	ldr	r2, [r4, #16]
 8003a16:	bf08      	it	eq
 8003a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bfc4      	itt	gt
 8003a20:	1a9b      	subgt	r3, r3, r2
 8003a22:	18ed      	addgt	r5, r5, r3
 8003a24:	341a      	adds	r4, #26
 8003a26:	42b5      	cmp	r5, r6
 8003a28:	d11a      	bne.n	8003a60 <_printf_common+0xcc>
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	e008      	b.n	8003a40 <_printf_common+0xac>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4652      	mov	r2, sl
 8003a32:	4649      	mov	r1, r9
 8003a34:	4638      	mov	r0, r7
 8003a36:	47c0      	blx	r8
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d103      	bne.n	8003a44 <_printf_common+0xb0>
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a44:	3501      	adds	r5, #1
 8003a46:	e7c4      	b.n	80039d2 <_printf_common+0x3e>
 8003a48:	2030      	movs	r0, #48	; 0x30
 8003a4a:	18e1      	adds	r1, r4, r3
 8003a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a56:	4422      	add	r2, r4
 8003a58:	3302      	adds	r3, #2
 8003a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a5e:	e7c5      	b.n	80039ec <_printf_common+0x58>
 8003a60:	2301      	movs	r3, #1
 8003a62:	4622      	mov	r2, r4
 8003a64:	4649      	mov	r1, r9
 8003a66:	4638      	mov	r0, r7
 8003a68:	47c0      	blx	r8
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d0e6      	beq.n	8003a3c <_printf_common+0xa8>
 8003a6e:	3601      	adds	r6, #1
 8003a70:	e7d9      	b.n	8003a26 <_printf_common+0x92>
	...

08003a74 <_printf_i>:
 8003a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a78:	460c      	mov	r4, r1
 8003a7a:	7e27      	ldrb	r7, [r4, #24]
 8003a7c:	4691      	mov	r9, r2
 8003a7e:	2f78      	cmp	r7, #120	; 0x78
 8003a80:	4680      	mov	r8, r0
 8003a82:	469a      	mov	sl, r3
 8003a84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a8a:	d807      	bhi.n	8003a9c <_printf_i+0x28>
 8003a8c:	2f62      	cmp	r7, #98	; 0x62
 8003a8e:	d80a      	bhi.n	8003aa6 <_printf_i+0x32>
 8003a90:	2f00      	cmp	r7, #0
 8003a92:	f000 80d9 	beq.w	8003c48 <_printf_i+0x1d4>
 8003a96:	2f58      	cmp	r7, #88	; 0x58
 8003a98:	f000 80a4 	beq.w	8003be4 <_printf_i+0x170>
 8003a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003aa4:	e03a      	b.n	8003b1c <_printf_i+0xa8>
 8003aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aaa:	2b15      	cmp	r3, #21
 8003aac:	d8f6      	bhi.n	8003a9c <_printf_i+0x28>
 8003aae:	a001      	add	r0, pc, #4	; (adr r0, 8003ab4 <_printf_i+0x40>)
 8003ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003b21 	.word	0x08003b21
 8003abc:	08003a9d 	.word	0x08003a9d
 8003ac0:	08003a9d 	.word	0x08003a9d
 8003ac4:	08003a9d 	.word	0x08003a9d
 8003ac8:	08003a9d 	.word	0x08003a9d
 8003acc:	08003b21 	.word	0x08003b21
 8003ad0:	08003a9d 	.word	0x08003a9d
 8003ad4:	08003a9d 	.word	0x08003a9d
 8003ad8:	08003a9d 	.word	0x08003a9d
 8003adc:	08003a9d 	.word	0x08003a9d
 8003ae0:	08003c2f 	.word	0x08003c2f
 8003ae4:	08003b51 	.word	0x08003b51
 8003ae8:	08003c11 	.word	0x08003c11
 8003aec:	08003a9d 	.word	0x08003a9d
 8003af0:	08003a9d 	.word	0x08003a9d
 8003af4:	08003c51 	.word	0x08003c51
 8003af8:	08003a9d 	.word	0x08003a9d
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003a9d 	.word	0x08003a9d
 8003b04:	08003a9d 	.word	0x08003a9d
 8003b08:	08003c19 	.word	0x08003c19
 8003b0c:	680b      	ldr	r3, [r1, #0]
 8003b0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	600a      	str	r2, [r1, #0]
 8003b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0a4      	b.n	8003c6a <_printf_i+0x1f6>
 8003b20:	6825      	ldr	r5, [r4, #0]
 8003b22:	6808      	ldr	r0, [r1, #0]
 8003b24:	062e      	lsls	r6, r5, #24
 8003b26:	f100 0304 	add.w	r3, r0, #4
 8003b2a:	d50a      	bpl.n	8003b42 <_printf_i+0xce>
 8003b2c:	6805      	ldr	r5, [r0, #0]
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	2d00      	cmp	r5, #0
 8003b32:	da03      	bge.n	8003b3c <_printf_i+0xc8>
 8003b34:	232d      	movs	r3, #45	; 0x2d
 8003b36:	426d      	negs	r5, r5
 8003b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b3c:	230a      	movs	r3, #10
 8003b3e:	485e      	ldr	r0, [pc, #376]	; (8003cb8 <_printf_i+0x244>)
 8003b40:	e019      	b.n	8003b76 <_printf_i+0x102>
 8003b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b46:	6805      	ldr	r5, [r0, #0]
 8003b48:	600b      	str	r3, [r1, #0]
 8003b4a:	bf18      	it	ne
 8003b4c:	b22d      	sxthne	r5, r5
 8003b4e:	e7ef      	b.n	8003b30 <_printf_i+0xbc>
 8003b50:	680b      	ldr	r3, [r1, #0]
 8003b52:	6825      	ldr	r5, [r4, #0]
 8003b54:	1d18      	adds	r0, r3, #4
 8003b56:	6008      	str	r0, [r1, #0]
 8003b58:	0628      	lsls	r0, r5, #24
 8003b5a:	d501      	bpl.n	8003b60 <_printf_i+0xec>
 8003b5c:	681d      	ldr	r5, [r3, #0]
 8003b5e:	e002      	b.n	8003b66 <_printf_i+0xf2>
 8003b60:	0669      	lsls	r1, r5, #25
 8003b62:	d5fb      	bpl.n	8003b5c <_printf_i+0xe8>
 8003b64:	881d      	ldrh	r5, [r3, #0]
 8003b66:	2f6f      	cmp	r7, #111	; 0x6f
 8003b68:	bf0c      	ite	eq
 8003b6a:	2308      	moveq	r3, #8
 8003b6c:	230a      	movne	r3, #10
 8003b6e:	4852      	ldr	r0, [pc, #328]	; (8003cb8 <_printf_i+0x244>)
 8003b70:	2100      	movs	r1, #0
 8003b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b76:	6866      	ldr	r6, [r4, #4]
 8003b78:	2e00      	cmp	r6, #0
 8003b7a:	bfa8      	it	ge
 8003b7c:	6821      	ldrge	r1, [r4, #0]
 8003b7e:	60a6      	str	r6, [r4, #8]
 8003b80:	bfa4      	itt	ge
 8003b82:	f021 0104 	bicge.w	r1, r1, #4
 8003b86:	6021      	strge	r1, [r4, #0]
 8003b88:	b90d      	cbnz	r5, 8003b8e <_printf_i+0x11a>
 8003b8a:	2e00      	cmp	r6, #0
 8003b8c:	d04d      	beq.n	8003c2a <_printf_i+0x1b6>
 8003b8e:	4616      	mov	r6, r2
 8003b90:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b94:	fb03 5711 	mls	r7, r3, r1, r5
 8003b98:	5dc7      	ldrb	r7, [r0, r7]
 8003b9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b9e:	462f      	mov	r7, r5
 8003ba0:	42bb      	cmp	r3, r7
 8003ba2:	460d      	mov	r5, r1
 8003ba4:	d9f4      	bls.n	8003b90 <_printf_i+0x11c>
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d10b      	bne.n	8003bc2 <_printf_i+0x14e>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	07df      	lsls	r7, r3, #31
 8003bae:	d508      	bpl.n	8003bc2 <_printf_i+0x14e>
 8003bb0:	6923      	ldr	r3, [r4, #16]
 8003bb2:	6861      	ldr	r1, [r4, #4]
 8003bb4:	4299      	cmp	r1, r3
 8003bb6:	bfde      	ittt	le
 8003bb8:	2330      	movle	r3, #48	; 0x30
 8003bba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bc2:	1b92      	subs	r2, r2, r6
 8003bc4:	6122      	str	r2, [r4, #16]
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	4621      	mov	r1, r4
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f8cd a000 	str.w	sl, [sp]
 8003bd0:	aa03      	add	r2, sp, #12
 8003bd2:	f7ff fedf 	bl	8003994 <_printf_common>
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d14c      	bne.n	8003c74 <_printf_i+0x200>
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	b004      	add	sp, #16
 8003be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be4:	4834      	ldr	r0, [pc, #208]	; (8003cb8 <_printf_i+0x244>)
 8003be6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bea:	680e      	ldr	r6, [r1, #0]
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bf2:	061f      	lsls	r7, r3, #24
 8003bf4:	600e      	str	r6, [r1, #0]
 8003bf6:	d514      	bpl.n	8003c22 <_printf_i+0x1ae>
 8003bf8:	07d9      	lsls	r1, r3, #31
 8003bfa:	bf44      	itt	mi
 8003bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8003c00:	6023      	strmi	r3, [r4, #0]
 8003c02:	b91d      	cbnz	r5, 8003c0c <_printf_i+0x198>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	f023 0320 	bic.w	r3, r3, #32
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	e7af      	b.n	8003b70 <_printf_i+0xfc>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	2378      	movs	r3, #120	; 0x78
 8003c1a:	4828      	ldr	r0, [pc, #160]	; (8003cbc <_printf_i+0x248>)
 8003c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c20:	e7e3      	b.n	8003bea <_printf_i+0x176>
 8003c22:	065e      	lsls	r6, r3, #25
 8003c24:	bf48      	it	mi
 8003c26:	b2ad      	uxthmi	r5, r5
 8003c28:	e7e6      	b.n	8003bf8 <_printf_i+0x184>
 8003c2a:	4616      	mov	r6, r2
 8003c2c:	e7bb      	b.n	8003ba6 <_printf_i+0x132>
 8003c2e:	680b      	ldr	r3, [r1, #0]
 8003c30:	6826      	ldr	r6, [r4, #0]
 8003c32:	1d1d      	adds	r5, r3, #4
 8003c34:	6960      	ldr	r0, [r4, #20]
 8003c36:	600d      	str	r5, [r1, #0]
 8003c38:	0635      	lsls	r5, r6, #24
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	d501      	bpl.n	8003c42 <_printf_i+0x1ce>
 8003c3e:	6018      	str	r0, [r3, #0]
 8003c40:	e002      	b.n	8003c48 <_printf_i+0x1d4>
 8003c42:	0671      	lsls	r1, r6, #25
 8003c44:	d5fb      	bpl.n	8003c3e <_printf_i+0x1ca>
 8003c46:	8018      	strh	r0, [r3, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4616      	mov	r6, r2
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	e7ba      	b.n	8003bc6 <_printf_i+0x152>
 8003c50:	680b      	ldr	r3, [r1, #0]
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	600a      	str	r2, [r1, #0]
 8003c56:	681e      	ldr	r6, [r3, #0]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	6862      	ldr	r2, [r4, #4]
 8003c5e:	f000 f82f 	bl	8003cc0 <memchr>
 8003c62:	b108      	cbz	r0, 8003c68 <_printf_i+0x1f4>
 8003c64:	1b80      	subs	r0, r0, r6
 8003c66:	6060      	str	r0, [r4, #4]
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	6123      	str	r3, [r4, #16]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c72:	e7a8      	b.n	8003bc6 <_printf_i+0x152>
 8003c74:	4632      	mov	r2, r6
 8003c76:	4649      	mov	r1, r9
 8003c78:	4640      	mov	r0, r8
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	47d0      	blx	sl
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d0ab      	beq.n	8003bda <_printf_i+0x166>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	079b      	lsls	r3, r3, #30
 8003c86:	d413      	bmi.n	8003cb0 <_printf_i+0x23c>
 8003c88:	68e0      	ldr	r0, [r4, #12]
 8003c8a:	9b03      	ldr	r3, [sp, #12]
 8003c8c:	4298      	cmp	r0, r3
 8003c8e:	bfb8      	it	lt
 8003c90:	4618      	movlt	r0, r3
 8003c92:	e7a4      	b.n	8003bde <_printf_i+0x16a>
 8003c94:	2301      	movs	r3, #1
 8003c96:	4632      	mov	r2, r6
 8003c98:	4649      	mov	r1, r9
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	47d0      	blx	sl
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d09b      	beq.n	8003bda <_printf_i+0x166>
 8003ca2:	3501      	adds	r5, #1
 8003ca4:	68e3      	ldr	r3, [r4, #12]
 8003ca6:	9903      	ldr	r1, [sp, #12]
 8003ca8:	1a5b      	subs	r3, r3, r1
 8003caa:	42ab      	cmp	r3, r5
 8003cac:	dcf2      	bgt.n	8003c94 <_printf_i+0x220>
 8003cae:	e7eb      	b.n	8003c88 <_printf_i+0x214>
 8003cb0:	2500      	movs	r5, #0
 8003cb2:	f104 0619 	add.w	r6, r4, #25
 8003cb6:	e7f5      	b.n	8003ca4 <_printf_i+0x230>
 8003cb8:	0800401f 	.word	0x0800401f
 8003cbc:	08004030 	.word	0x08004030

08003cc0 <memchr>:
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	b510      	push	{r4, lr}
 8003cc4:	b2c9      	uxtb	r1, r1
 8003cc6:	4402      	add	r2, r0
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	d101      	bne.n	8003cd2 <memchr+0x12>
 8003cce:	2000      	movs	r0, #0
 8003cd0:	e003      	b.n	8003cda <memchr+0x1a>
 8003cd2:	7804      	ldrb	r4, [r0, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	428c      	cmp	r4, r1
 8003cd8:	d1f6      	bne.n	8003cc8 <memchr+0x8>
 8003cda:	bd10      	pop	{r4, pc}

08003cdc <memcpy>:
 8003cdc:	440a      	add	r2, r1
 8003cde:	4291      	cmp	r1, r2
 8003ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ce4:	d100      	bne.n	8003ce8 <memcpy+0xc>
 8003ce6:	4770      	bx	lr
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cee:	4291      	cmp	r1, r2
 8003cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cf4:	d1f9      	bne.n	8003cea <memcpy+0xe>
 8003cf6:	bd10      	pop	{r4, pc}

08003cf8 <memmove>:
 8003cf8:	4288      	cmp	r0, r1
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	eb01 0402 	add.w	r4, r1, r2
 8003d00:	d902      	bls.n	8003d08 <memmove+0x10>
 8003d02:	4284      	cmp	r4, r0
 8003d04:	4623      	mov	r3, r4
 8003d06:	d807      	bhi.n	8003d18 <memmove+0x20>
 8003d08:	1e43      	subs	r3, r0, #1
 8003d0a:	42a1      	cmp	r1, r4
 8003d0c:	d008      	beq.n	8003d20 <memmove+0x28>
 8003d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d16:	e7f8      	b.n	8003d0a <memmove+0x12>
 8003d18:	4601      	mov	r1, r0
 8003d1a:	4402      	add	r2, r0
 8003d1c:	428a      	cmp	r2, r1
 8003d1e:	d100      	bne.n	8003d22 <memmove+0x2a>
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d2a:	e7f7      	b.n	8003d1c <memmove+0x24>

08003d2c <_free_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4605      	mov	r5, r0
 8003d30:	2900      	cmp	r1, #0
 8003d32:	d043      	beq.n	8003dbc <_free_r+0x90>
 8003d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d38:	1f0c      	subs	r4, r1, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bfb8      	it	lt
 8003d3e:	18e4      	addlt	r4, r4, r3
 8003d40:	f000 f8d0 	bl	8003ee4 <__malloc_lock>
 8003d44:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <_free_r+0x94>)
 8003d46:	6813      	ldr	r3, [r2, #0]
 8003d48:	4610      	mov	r0, r2
 8003d4a:	b933      	cbnz	r3, 8003d5a <_free_r+0x2e>
 8003d4c:	6063      	str	r3, [r4, #4]
 8003d4e:	6014      	str	r4, [r2, #0]
 8003d50:	4628      	mov	r0, r5
 8003d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d56:	f000 b8cb 	b.w	8003ef0 <__malloc_unlock>
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	d90a      	bls.n	8003d74 <_free_r+0x48>
 8003d5e:	6821      	ldr	r1, [r4, #0]
 8003d60:	1862      	adds	r2, r4, r1
 8003d62:	4293      	cmp	r3, r2
 8003d64:	bf01      	itttt	eq
 8003d66:	681a      	ldreq	r2, [r3, #0]
 8003d68:	685b      	ldreq	r3, [r3, #4]
 8003d6a:	1852      	addeq	r2, r2, r1
 8003d6c:	6022      	streq	r2, [r4, #0]
 8003d6e:	6063      	str	r3, [r4, #4]
 8003d70:	6004      	str	r4, [r0, #0]
 8003d72:	e7ed      	b.n	8003d50 <_free_r+0x24>
 8003d74:	461a      	mov	r2, r3
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	b10b      	cbz	r3, 8003d7e <_free_r+0x52>
 8003d7a:	42a3      	cmp	r3, r4
 8003d7c:	d9fa      	bls.n	8003d74 <_free_r+0x48>
 8003d7e:	6811      	ldr	r1, [r2, #0]
 8003d80:	1850      	adds	r0, r2, r1
 8003d82:	42a0      	cmp	r0, r4
 8003d84:	d10b      	bne.n	8003d9e <_free_r+0x72>
 8003d86:	6820      	ldr	r0, [r4, #0]
 8003d88:	4401      	add	r1, r0
 8003d8a:	1850      	adds	r0, r2, r1
 8003d8c:	4283      	cmp	r3, r0
 8003d8e:	6011      	str	r1, [r2, #0]
 8003d90:	d1de      	bne.n	8003d50 <_free_r+0x24>
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4401      	add	r1, r0
 8003d98:	6011      	str	r1, [r2, #0]
 8003d9a:	6053      	str	r3, [r2, #4]
 8003d9c:	e7d8      	b.n	8003d50 <_free_r+0x24>
 8003d9e:	d902      	bls.n	8003da6 <_free_r+0x7a>
 8003da0:	230c      	movs	r3, #12
 8003da2:	602b      	str	r3, [r5, #0]
 8003da4:	e7d4      	b.n	8003d50 <_free_r+0x24>
 8003da6:	6820      	ldr	r0, [r4, #0]
 8003da8:	1821      	adds	r1, r4, r0
 8003daa:	428b      	cmp	r3, r1
 8003dac:	bf01      	itttt	eq
 8003dae:	6819      	ldreq	r1, [r3, #0]
 8003db0:	685b      	ldreq	r3, [r3, #4]
 8003db2:	1809      	addeq	r1, r1, r0
 8003db4:	6021      	streq	r1, [r4, #0]
 8003db6:	6063      	str	r3, [r4, #4]
 8003db8:	6054      	str	r4, [r2, #4]
 8003dba:	e7c9      	b.n	8003d50 <_free_r+0x24>
 8003dbc:	bd38      	pop	{r3, r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000144 	.word	0x20000144

08003dc4 <_malloc_r>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	1ccd      	adds	r5, r1, #3
 8003dc8:	f025 0503 	bic.w	r5, r5, #3
 8003dcc:	3508      	adds	r5, #8
 8003dce:	2d0c      	cmp	r5, #12
 8003dd0:	bf38      	it	cc
 8003dd2:	250c      	movcc	r5, #12
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	db01      	blt.n	8003dde <_malloc_r+0x1a>
 8003dda:	42a9      	cmp	r1, r5
 8003ddc:	d903      	bls.n	8003de6 <_malloc_r+0x22>
 8003dde:	230c      	movs	r3, #12
 8003de0:	6033      	str	r3, [r6, #0]
 8003de2:	2000      	movs	r0, #0
 8003de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de6:	f000 f87d 	bl	8003ee4 <__malloc_lock>
 8003dea:	4921      	ldr	r1, [pc, #132]	; (8003e70 <_malloc_r+0xac>)
 8003dec:	680a      	ldr	r2, [r1, #0]
 8003dee:	4614      	mov	r4, r2
 8003df0:	b99c      	cbnz	r4, 8003e1a <_malloc_r+0x56>
 8003df2:	4f20      	ldr	r7, [pc, #128]	; (8003e74 <_malloc_r+0xb0>)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b923      	cbnz	r3, 8003e02 <_malloc_r+0x3e>
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	f000 f862 	bl	8003ec4 <_sbrk_r>
 8003e00:	6038      	str	r0, [r7, #0]
 8003e02:	4629      	mov	r1, r5
 8003e04:	4630      	mov	r0, r6
 8003e06:	f000 f85d 	bl	8003ec4 <_sbrk_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d123      	bne.n	8003e56 <_malloc_r+0x92>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	4630      	mov	r0, r6
 8003e12:	6033      	str	r3, [r6, #0]
 8003e14:	f000 f86c 	bl	8003ef0 <__malloc_unlock>
 8003e18:	e7e3      	b.n	8003de2 <_malloc_r+0x1e>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	1b5b      	subs	r3, r3, r5
 8003e1e:	d417      	bmi.n	8003e50 <_malloc_r+0x8c>
 8003e20:	2b0b      	cmp	r3, #11
 8003e22:	d903      	bls.n	8003e2c <_malloc_r+0x68>
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	441c      	add	r4, r3
 8003e28:	6025      	str	r5, [r4, #0]
 8003e2a:	e004      	b.n	8003e36 <_malloc_r+0x72>
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	42a2      	cmp	r2, r4
 8003e30:	bf0c      	ite	eq
 8003e32:	600b      	streq	r3, [r1, #0]
 8003e34:	6053      	strne	r3, [r2, #4]
 8003e36:	4630      	mov	r0, r6
 8003e38:	f000 f85a 	bl	8003ef0 <__malloc_unlock>
 8003e3c:	f104 000b 	add.w	r0, r4, #11
 8003e40:	1d23      	adds	r3, r4, #4
 8003e42:	f020 0007 	bic.w	r0, r0, #7
 8003e46:	1ac2      	subs	r2, r0, r3
 8003e48:	d0cc      	beq.n	8003de4 <_malloc_r+0x20>
 8003e4a:	1a1b      	subs	r3, r3, r0
 8003e4c:	50a3      	str	r3, [r4, r2]
 8003e4e:	e7c9      	b.n	8003de4 <_malloc_r+0x20>
 8003e50:	4622      	mov	r2, r4
 8003e52:	6864      	ldr	r4, [r4, #4]
 8003e54:	e7cc      	b.n	8003df0 <_malloc_r+0x2c>
 8003e56:	1cc4      	adds	r4, r0, #3
 8003e58:	f024 0403 	bic.w	r4, r4, #3
 8003e5c:	42a0      	cmp	r0, r4
 8003e5e:	d0e3      	beq.n	8003e28 <_malloc_r+0x64>
 8003e60:	1a21      	subs	r1, r4, r0
 8003e62:	4630      	mov	r0, r6
 8003e64:	f000 f82e 	bl	8003ec4 <_sbrk_r>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d1dd      	bne.n	8003e28 <_malloc_r+0x64>
 8003e6c:	e7cf      	b.n	8003e0e <_malloc_r+0x4a>
 8003e6e:	bf00      	nop
 8003e70:	20000144 	.word	0x20000144
 8003e74:	20000148 	.word	0x20000148

08003e78 <_realloc_r>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	4607      	mov	r7, r0
 8003e7c:	4614      	mov	r4, r2
 8003e7e:	460e      	mov	r6, r1
 8003e80:	b921      	cbnz	r1, 8003e8c <_realloc_r+0x14>
 8003e82:	4611      	mov	r1, r2
 8003e84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e88:	f7ff bf9c 	b.w	8003dc4 <_malloc_r>
 8003e8c:	b922      	cbnz	r2, 8003e98 <_realloc_r+0x20>
 8003e8e:	f7ff ff4d 	bl	8003d2c <_free_r>
 8003e92:	4625      	mov	r5, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e98:	f000 f830 	bl	8003efc <_malloc_usable_size_r>
 8003e9c:	42a0      	cmp	r0, r4
 8003e9e:	d20f      	bcs.n	8003ec0 <_realloc_r+0x48>
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	f7ff ff8e 	bl	8003dc4 <_malloc_r>
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d0f2      	beq.n	8003e94 <_realloc_r+0x1c>
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	f7ff ff13 	bl	8003cdc <memcpy>
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	4638      	mov	r0, r7
 8003eba:	f7ff ff37 	bl	8003d2c <_free_r>
 8003ebe:	e7e9      	b.n	8003e94 <_realloc_r+0x1c>
 8003ec0:	4635      	mov	r5, r6
 8003ec2:	e7e7      	b.n	8003e94 <_realloc_r+0x1c>

08003ec4 <_sbrk_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	4d05      	ldr	r5, [pc, #20]	; (8003ee0 <_sbrk_r+0x1c>)
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	f7fd fb68 	bl	80015a4 <_sbrk>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_sbrk_r+0x1a>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_sbrk_r+0x1a>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	20000200 	.word	0x20000200

08003ee4 <__malloc_lock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	; (8003eec <__malloc_lock+0x8>)
 8003ee6:	f000 b811 	b.w	8003f0c <__retarget_lock_acquire_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000208 	.word	0x20000208

08003ef0 <__malloc_unlock>:
 8003ef0:	4801      	ldr	r0, [pc, #4]	; (8003ef8 <__malloc_unlock+0x8>)
 8003ef2:	f000 b80c 	b.w	8003f0e <__retarget_lock_release_recursive>
 8003ef6:	bf00      	nop
 8003ef8:	20000208 	.word	0x20000208

08003efc <_malloc_usable_size_r>:
 8003efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f00:	1f18      	subs	r0, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfbc      	itt	lt
 8003f06:	580b      	ldrlt	r3, [r1, r0]
 8003f08:	18c0      	addlt	r0, r0, r3
 8003f0a:	4770      	bx	lr

08003f0c <__retarget_lock_acquire_recursive>:
 8003f0c:	4770      	bx	lr

08003f0e <__retarget_lock_release_recursive>:
 8003f0e:	4770      	bx	lr

08003f10 <_init>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr

08003f1c <_fini>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	bf00      	nop
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr
